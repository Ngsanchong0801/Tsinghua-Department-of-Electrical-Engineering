
task7_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a4c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c64  08006c64  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c64  08006c64  00016c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c6c  08006c6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c6c  08006c6c  00016c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  2000000c  08006c80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08006c80  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180e8  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293b  00000000  00000000  00038124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  0003aa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001390  00000000  00000000  0003bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279af  00000000  00000000  0003d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dae  00000000  00000000  00064c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e78b  00000000  00000000  0007b9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018a150  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005900  00000000  00000000  0018a1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006c0c 	.word	0x08006c0c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006c0c 	.word	0x08006c0c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fd37 	bl	8000f92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f830 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 fab4 	bl	8000a94 <MX_GPIO_Init>
  MX_DMA_Init();
 800052c:	f000 fa88 	bl	8000a40 <MX_DMA_Init>
  MX_ADC1_Init();
 8000530:	f000 f874 	bl	800061c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000534:	f000 fa36 	bl	80009a4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000538:	f000 f9e6 	bl	8000908 <MX_TIM3_Init>
  MX_TIM1_Init();
 800053c:	f000 f8e6 	bl	800070c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000540:	f000 f996 	bl	8000870 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000544:	217f      	movs	r1, #127	; 0x7f
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <main+0x58>)
 8000548:	f002 f898 	bl	800267c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC1ConvertedData, LEN);
 800054c:	223c      	movs	r2, #60	; 0x3c
 800054e:	490a      	ldr	r1, [pc, #40]	; (8000578 <main+0x5c>)
 8000550:	4808      	ldr	r0, [pc, #32]	; (8000574 <main+0x58>)
 8000552:	f001 f98f 	bl	8001874 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start(&htim3);
 8000556:	4809      	ldr	r0, [pc, #36]	; (800057c <main+0x60>)
 8000558:	f003 ff86 	bl	8004468 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800055c:	4808      	ldr	r0, [pc, #32]	; (8000580 <main+0x64>)
 800055e:	f003 fff3 	bl	8004548 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8000562:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x68>)
 8000564:	f003 ff80 	bl	8004468 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000568:	2100      	movs	r1, #0
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <main+0x68>)
 800056c:	f004 f8c6 	bl	80046fc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000570:	e7fe      	b.n	8000570 <main+0x54>
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028
 8000578:	2000026c 	.word	0x2000026c
 800057c:	2000018c 	.word	0x2000018c
 8000580:	20000140 	.word	0x20000140
 8000584:	200000f4 	.word	0x200000f4

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	2238      	movs	r2, #56	; 0x38
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f006 fb30 	bl	8006bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f002 fed4 	bl	8003358 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	2303      	movs	r3, #3
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005c2:	2306      	movs	r3, #6
 80005c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005c6:	2355      	movs	r3, #85	; 0x55
 80005c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV10;
 80005ca:	230a      	movs	r3, #10
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 0318 	add.w	r3, r7, #24
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 ff70 	bl	80034c0 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005e6:	f000 fad3 	bl	8000b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ee:	2303      	movs	r3, #3
 80005f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2104      	movs	r1, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fa6e 	bl	8003ae4 <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800060e:	f000 fabf 	bl	8000b90 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	; 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08c      	sub	sp, #48	; 0x30
 8000620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2220      	movs	r2, #32
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f006 fae1 	bl	8006bfc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800063a:	4b32      	ldr	r3, [pc, #200]	; (8000704 <MX_ADC1_Init+0xe8>)
 800063c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000640:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000642:	4b30      	ldr	r3, [pc, #192]	; (8000704 <MX_ADC1_Init+0xe8>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000648:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <MX_ADC1_Init+0xe8>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064e:	4b2d      	ldr	r3, [pc, #180]	; (8000704 <MX_ADC1_Init+0xe8>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000654:	4b2b      	ldr	r3, [pc, #172]	; (8000704 <MX_ADC1_Init+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800065a:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_ADC1_Init+0xe8>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000660:	4b28      	ldr	r3, [pc, #160]	; (8000704 <MX_ADC1_Init+0xe8>)
 8000662:	2204      	movs	r2, #4
 8000664:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000666:	4b27      	ldr	r3, [pc, #156]	; (8000704 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800066c:	4b25      	ldr	r3, [pc, #148]	; (8000704 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000672:	4b24      	ldr	r3, [pc, #144]	; (8000704 <MX_ADC1_Init+0xe8>)
 8000674:	2201      	movs	r2, #1
 8000676:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <MX_ADC1_Init+0xe8>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000680:	4b20      	ldr	r3, [pc, #128]	; (8000704 <MX_ADC1_Init+0xe8>)
 8000682:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <MX_ADC1_Init+0xe8>)
 800068a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800068e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000690:	4b1c      	ldr	r3, [pc, #112]	; (8000704 <MX_ADC1_Init+0xe8>)
 8000692:	2201      	movs	r2, #1
 8000694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_ADC1_Init+0xe8>)
 800069a:	2200      	movs	r2, #0
 800069c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_ADC1_Init+0xe8>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a6:	4817      	ldr	r0, [pc, #92]	; (8000704 <MX_ADC1_Init+0xe8>)
 80006a8:	f000 ff28 	bl	80014fc <HAL_ADC_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80006b2:	f000 fa6d 	bl	8000b90 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006be:	4619      	mov	r1, r3
 80006c0:	4810      	ldr	r0, [pc, #64]	; (8000704 <MX_ADC1_Init+0xe8>)
 80006c2:	f002 f83d 	bl	8002740 <HAL_ADCEx_MultiModeConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80006cc:	f000 fa60 	bl	8000b90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_ADC1_Init+0xec>)
 80006d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d4:	2306      	movs	r3, #6
 80006d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006dc:	237f      	movs	r3, #127	; 0x7f
 80006de:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006e0:	2304      	movs	r3, #4
 80006e2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_ADC1_Init+0xe8>)
 80006ee:	f001 f9a9 	bl	8001a44 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006f8:	f000 fa4a 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	3730      	adds	r7, #48	; 0x30
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000028 	.word	0x20000028
 8000708:	04300002 	.word	0x04300002

0800070c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b09c      	sub	sp, #112	; 0x70
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]
 800073e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2234      	movs	r2, #52	; 0x34
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f006 fa58 	bl	8006bfc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074c:	4b46      	ldr	r3, [pc, #280]	; (8000868 <MX_TIM1_Init+0x15c>)
 800074e:	4a47      	ldr	r2, [pc, #284]	; (800086c <MX_TIM1_Init+0x160>)
 8000750:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8000752:	4b45      	ldr	r3, [pc, #276]	; (8000868 <MX_TIM1_Init+0x15c>)
 8000754:	22a9      	movs	r2, #169	; 0xa9
 8000756:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b43      	ldr	r3, [pc, #268]	; (8000868 <MX_TIM1_Init+0x15c>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800075e:	4b42      	ldr	r3, [pc, #264]	; (8000868 <MX_TIM1_Init+0x15c>)
 8000760:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000764:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000766:	4b40      	ldr	r3, [pc, #256]	; (8000868 <MX_TIM1_Init+0x15c>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076c:	4b3e      	ldr	r3, [pc, #248]	; (8000868 <MX_TIM1_Init+0x15c>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000772:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <MX_TIM1_Init+0x15c>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000778:	483b      	ldr	r0, [pc, #236]	; (8000868 <MX_TIM1_Init+0x15c>)
 800077a:	f003 fe1d 	bl	80043b8 <HAL_TIM_Base_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000784:	f000 fa04 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000792:	4619      	mov	r1, r3
 8000794:	4834      	ldr	r0, [pc, #208]	; (8000868 <MX_TIM1_Init+0x15c>)
 8000796:	f004 fbc3 	bl	8004f20 <HAL_TIM_ConfigClockSource>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007a0:	f000 f9f6 	bl	8000b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a4:	4830      	ldr	r0, [pc, #192]	; (8000868 <MX_TIM1_Init+0x15c>)
 80007a6:	f003 ff47 	bl	8004638 <HAL_TIM_PWM_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80007b0:	f000 f9ee 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b4:	2300      	movs	r3, #0
 80007b6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007b8:	2300      	movs	r3, #0
 80007ba:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007c4:	4619      	mov	r1, r3
 80007c6:	4828      	ldr	r0, [pc, #160]	; (8000868 <MX_TIM1_Init+0x15c>)
 80007c8:	f005 f988 	bl	8005adc <HAL_TIMEx_MasterConfigSynchronization>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80007d2:	f000 f9dd 	bl	8000b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d6:	2360      	movs	r3, #96	; 0x60
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 999;
 80007da:	f240 33e7 	movw	r3, #999	; 0x3e7
 80007de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007e0:	2300      	movs	r3, #0
 80007e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007e4:	2300      	movs	r3, #0
 80007e6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007f0:	2300      	movs	r3, #0
 80007f2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	481a      	ldr	r0, [pc, #104]	; (8000868 <MX_TIM1_Init+0x15c>)
 80007fe:	f004 fa7b 	bl	8004cf8 <HAL_TIM_PWM_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000808:	f000 f9c2 	bl	8000b90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000824:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4619      	mov	r1, r3
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <MX_TIM1_Init+0x15c>)
 800084a:	f005 f9dd 	bl	8005c08 <HAL_TIMEx_ConfigBreakDeadTime>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8000854:	f000 f99c 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000858:	4803      	ldr	r0, [pc, #12]	; (8000868 <MX_TIM1_Init+0x15c>)
 800085a:	f000 fa91 	bl	8000d80 <HAL_TIM_MspPostInit>

}
 800085e:	bf00      	nop
 8000860:	3770      	adds	r7, #112	; 0x70
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000f4 	.word	0x200000f4
 800086c:	40012c00 	.word	0x40012c00

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088e:	4b1d      	ldr	r3, [pc, #116]	; (8000904 <MX_TIM2_Init+0x94>)
 8000890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000894:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000896:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_TIM2_Init+0x94>)
 8000898:	22a9      	movs	r2, #169	; 0xa9
 800089a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <MX_TIM2_Init+0x94>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_TIM2_Init+0x94>)
 80008a4:	2209      	movs	r2, #9
 80008a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <MX_TIM2_Init+0x94>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_TIM2_Init+0x94>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b4:	4813      	ldr	r0, [pc, #76]	; (8000904 <MX_TIM2_Init+0x94>)
 80008b6:	f003 fd7f 	bl	80043b8 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008c0:	f000 f966 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0310 	add.w	r3, r7, #16
 80008ce:	4619      	mov	r1, r3
 80008d0:	480c      	ldr	r0, [pc, #48]	; (8000904 <MX_TIM2_Init+0x94>)
 80008d2:	f004 fb25 	bl	8004f20 <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008dc:	f000 f958 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_TIM2_Init+0x94>)
 80008ee:	f005 f8f5 	bl	8005adc <HAL_TIMEx_MasterConfigSynchronization>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f94a 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000140 	.word	0x20000140

08000908 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000926:	4b1d      	ldr	r3, [pc, #116]	; (800099c <MX_TIM3_Init+0x94>)
 8000928:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <MX_TIM3_Init+0x98>)
 800092a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <MX_TIM3_Init+0x94>)
 800092e:	22a9      	movs	r2, #169	; 0xa9
 8000930:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_TIM3_Init+0x94>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19;
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <MX_TIM3_Init+0x94>)
 800093a:	2213      	movs	r2, #19
 800093c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_TIM3_Init+0x94>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <MX_TIM3_Init+0x94>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800094a:	4814      	ldr	r0, [pc, #80]	; (800099c <MX_TIM3_Init+0x94>)
 800094c:	f003 fd34 	bl	80043b8 <HAL_TIM_Base_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000956:	f000 f91b 	bl	8000b90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_TIM3_Init+0x94>)
 8000968:	f004 fada 	bl	8004f20 <HAL_TIM_ConfigClockSource>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 f90d 	bl	8000b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000976:	2320      	movs	r3, #32
 8000978:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	4619      	mov	r1, r3
 8000982:	4806      	ldr	r0, [pc, #24]	; (800099c <MX_TIM3_Init+0x94>)
 8000984:	f005 f8aa 	bl	8005adc <HAL_TIMEx_MasterConfigSynchronization>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800098e:	f000 f8ff 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	3720      	adds	r7, #32
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000018c 	.word	0x2000018c
 80009a0:	40000400 	.word	0x40000400

080009a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <MX_USART2_UART_Init+0x94>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2000000;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009b0:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <MX_USART2_UART_Init+0x98>)
 80009b2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009bc:	2200      	movs	r2, #0
 80009be:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c6:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009c8:	220c      	movs	r2, #12
 80009ca:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ea:	4812      	ldr	r0, [pc, #72]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009ec:	f005 f9e6 	bl	8005dbc <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80009f6:	f000 f8cb 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 80009fe:	f006 f80f 	bl	8006a20 <HAL_UARTEx_SetTxFifoThreshold>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000a08:	f000 f8c2 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4809      	ldr	r0, [pc, #36]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 8000a10:	f006 f844 	bl	8006a9c <HAL_UARTEx_SetRxFifoThreshold>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000a1a:	f000 f8b9 	bl	8000b90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x90>)
 8000a20:	f005 ffc5 	bl	80069ae <HAL_UARTEx_DisableFifoMode>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000a2a:	f000 f8b1 	bl	8000b90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001d8 	.word	0x200001d8
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	001e8480 	.word	0x001e8480

08000a40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_DMA_Init+0x50>)
 8000a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a4a:	4a11      	ldr	r2, [pc, #68]	; (8000a90 <MX_DMA_Init+0x50>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	6493      	str	r3, [r2, #72]	; 0x48
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_DMA_Init+0x50>)
 8000a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_DMA_Init+0x50>)
 8000a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <MX_DMA_Init+0x50>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6493      	str	r3, [r2, #72]	; 0x48
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_DMA_Init+0x50>)
 8000a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	200b      	movs	r0, #11
 8000a7c:	f002 f843 	bl	8002b06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a80:	200b      	movs	r0, #11
 8000a82:	f002 f85a 	bl	8002b3a <HAL_NVIC_EnableIRQ>

}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <MX_GPIO_Init+0x5c>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <MX_GPIO_Init+0x5c>)
 8000aa0:	f043 0320 	orr.w	r3, r3, #32
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <MX_GPIO_Init+0x5c>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <MX_GPIO_Init+0x5c>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <MX_GPIO_Init+0x5c>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_GPIO_Init+0x5c>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_GPIO_Init+0x5c>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <MX_GPIO_Init+0x5c>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_GPIO_Init+0x5c>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

}
 8000ae2:	bf00      	nop
 8000ae4:	3714      	adds	r7, #20
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ADC1ConvertedData, LEN*2, 0xFFFF);
 8000afc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b00:	2278      	movs	r2, #120	; 0x78
 8000b02:	4904      	ldr	r1, [pc, #16]	; (8000b14 <HAL_ADC_ConvCpltCallback+0x20>)
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <HAL_ADC_ConvCpltCallback+0x24>)
 8000b06:	f005 f9a9 	bl	8005e5c <HAL_UART_Transmit>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000026c 	.word	0x2000026c
 8000b18:	200001d8 	.word	0x200001d8

08000b1c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	if(count == 1000){
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b2c:	d107      	bne.n	8000b3e <HAL_TIM_PeriodElapsedCallback+0x22>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4816      	ldr	r0, [pc, #88]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b32:	f003 fde3 	bl	80046fc <HAL_TIM_PWM_Start>
		count = 0;
 8000b36:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	801a      	strh	r2, [r3, #0]
		}
		if(count == 400){ // t3=100
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
		}
	}
}
 8000b3c:	e01f      	b.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x62>
		count++;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b40:	881b      	ldrh	r3, [r3, #0]
 8000b42:	3301      	adds	r3, #1
 8000b44:	b29a      	uxth	r2, r3
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b48:	801a      	strh	r2, [r3, #0]
		if(count == 200){ // t1=100
 8000b4a:	4b0f      	ldr	r3, [pc, #60]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	2bc8      	cmp	r3, #200	; 0xc8
 8000b50:	d103      	bne.n	8000b5a <HAL_TIM_PeriodElapsedCallback+0x3e>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000b52:	2100      	movs	r1, #0
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b56:	f003 fee3 	bl	8004920 <HAL_TIM_PWM_Stop>
		if(count == 300){ // t2=200
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000b62:	d103      	bne.n	8000b6c <HAL_TIM_PeriodElapsedCallback+0x50>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b64:	2100      	movs	r1, #0
 8000b66:	4809      	ldr	r0, [pc, #36]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b68:	f003 fdc8 	bl	80046fc <HAL_TIM_PWM_Start>
		if(count == 400){ // t3=100
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000b74:	d103      	bne.n	8000b7e <HAL_TIM_PeriodElapsedCallback+0x62>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000b76:	2100      	movs	r1, #0
 8000b78:	4804      	ldr	r0, [pc, #16]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000b7a:	f003 fed1 	bl	8004920 <HAL_TIM_PWM_Stop>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200002e4 	.word	0x200002e4
 8000b8c:	200000f4 	.word	0x200000f4

08000b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b94:	b672      	cpsid	i
}
 8000b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <Error_Handler+0x8>
	...

08000b9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_MspInit+0x44>)
 8000ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_MspInit+0x44>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6613      	str	r3, [r2, #96]	; 0x60
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_MspInit+0x44>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <HAL_MspInit+0x44>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <HAL_MspInit+0x44>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_MspInit+0x44>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bd2:	f002 fc65 	bl	80034a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b09e      	sub	sp, #120	; 0x78
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2254      	movs	r2, #84	; 0x54
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f005 fff9 	bl	8006bfc <memset>
  if(hadc->Instance==ADC1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c12:	d15f      	bne.n	8000cd4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000c1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000c1e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 f979 	bl	8003f1c <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c30:	f7ff ffae 	bl	8000b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <HAL_ADC_MspInit+0xf8>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c38:	4a28      	ldr	r2, [pc, #160]	; (8000cdc <HAL_ADC_MspInit+0xf8>)
 8000c3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <HAL_ADC_MspInit+0xf8>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <HAL_ADC_MspInit+0xf8>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c50:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <HAL_ADC_MspInit+0xf8>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c58:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <HAL_ADC_MspInit+0xf8>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c64:	2301      	movs	r3, #1
 8000c66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c74:	4619      	mov	r1, r3
 8000c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7a:	f002 f9eb 	bl	8003054 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000c80:	4a18      	ldr	r2, [pc, #96]	; (8000ce4 <HAL_ADC_MspInit+0x100>)
 8000c82:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000c86:	2205      	movs	r2, #5
 8000c88:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c9c:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ca2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000caa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000cae:	2220      	movs	r2, #32
 8000cb0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000cba:	f001 ff59 	bl	8002b70 <HAL_DMA_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000cc4:	f7ff ff64 	bl	8000b90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000ccc:	655a      	str	r2, [r3, #84]	; 0x54
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_ADC_MspInit+0xfc>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3778      	adds	r7, #120	; 0x78
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	20000094 	.word	0x20000094
 8000ce4:	40020008 	.word	0x40020008

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a1f      	ldr	r2, [pc, #124]	; (8000d74 <HAL_TIM_Base_MspInit+0x8c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d10c      	bne.n	8000d14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <HAL_TIM_Base_MspInit+0x90>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	; (8000d78 <HAL_TIM_Base_MspInit+0x90>)
 8000d00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d04:	6613      	str	r3, [r2, #96]	; 0x60
 8000d06:	4b1c      	ldr	r3, [pc, #112]	; (8000d78 <HAL_TIM_Base_MspInit+0x90>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d12:	e02a      	b.n	8000d6a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d1c:	d114      	bne.n	8000d48 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1e:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <HAL_TIM_Base_MspInit+0x90>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	4a15      	ldr	r2, [pc, #84]	; (8000d78 <HAL_TIM_Base_MspInit+0x90>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <HAL_TIM_Base_MspInit+0x90>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	201c      	movs	r0, #28
 8000d3c:	f001 fee3 	bl	8002b06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d40:	201c      	movs	r0, #28
 8000d42:	f001 fefa 	bl	8002b3a <HAL_NVIC_EnableIRQ>
}
 8000d46:	e010      	b.n	8000d6a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0b      	ldr	r2, [pc, #44]	; (8000d7c <HAL_TIM_Base_MspInit+0x94>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d10b      	bne.n	8000d6a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_TIM_Base_MspInit+0x90>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <HAL_TIM_Base_MspInit+0x90>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_TIM_Base_MspInit+0x90>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40012c00 	.word	0x40012c00
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40000400 	.word	0x40000400

08000d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a11      	ldr	r2, [pc, #68]	; (8000de4 <HAL_TIM_MspPostInit+0x64>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d11b      	bne.n	8000dda <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a10      	ldr	r2, [pc, #64]	; (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000da8:	f043 0304 	orr.w	r3, r3, #4
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_TIM_MspPostInit+0x68>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0304 	and.w	r3, r3, #4
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4805      	ldr	r0, [pc, #20]	; (8000dec <HAL_TIM_MspPostInit+0x6c>)
 8000dd6:	f002 f93d 	bl	8003054 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40012c00 	.word	0x40012c00
 8000de8:	40021000 	.word	0x40021000
 8000dec:	48000800 	.word	0x48000800

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b09e      	sub	sp, #120	; 0x78
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	2254      	movs	r2, #84	; 0x54
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f005 fef3 	bl	8006bfc <memset>
  if(huart->Instance==USART2)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_UART_MspInit+0xa8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d136      	bne.n	8000e8e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e20:	2302      	movs	r3, #2
 8000e22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e28:	f107 0310 	add.w	r3, r7, #16
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f003 f875 	bl	8003f1c <HAL_RCCEx_PeriphCLKConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e38:	f7ff feaa 	bl	8000b90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e3c:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_UART_MspInit+0xac>)
 8000e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e40:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <HAL_UART_MspInit+0xac>)
 8000e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e46:	6593      	str	r3, [r2, #88]	; 0x58
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_UART_MspInit+0xac>)
 8000e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_UART_MspInit+0xac>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <HAL_UART_MspInit+0xac>)
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <HAL_UART_MspInit+0xac>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e7c:	2307      	movs	r3, #7
 8000e7e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f002 f8e3 	bl	8003054 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8e:	bf00      	nop
 8000e90:	3778      	adds	r7, #120	; 0x78
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40004400 	.word	0x40004400
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 f8a4 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <DMA1_Channel1_IRQHandler+0x10>)
 8000efa:	f001 ff5c 	bl	8002db6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000094 	.word	0x20000094

08000f08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <TIM2_IRQHandler+0x10>)
 8000f0e:	f003 fda3 	bl	8004a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000140 	.word	0x20000140

08000f1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f44:	f7ff ffea 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f005 fe21 	bl	8006bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f72:	f7ff fad3 	bl	800051c <main>

08000f76 <LoopForever>:

LoopForever:
    b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
  ldr   r0, =_estack
 8000f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f84:	08006c74 	.word	0x08006c74
  ldr r2, =_sbss
 8000f88:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f8c:	200002ec 	.word	0x200002ec

08000f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_2_IRQHandler>

08000f92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f001 fda7 	bl	8002af0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa2:	200f      	movs	r0, #15
 8000fa4:	f000 f80e 	bl	8000fc4 <HAL_InitTick>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	e001      	b.n	8000fb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fb4:	f7ff fdf2 	bl	8000b9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]

}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fd0:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_InitTick+0x68>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d022      	beq.n	800101e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_InitTick+0x6c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <HAL_InitTick+0x68>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fdb2 	bl	8002b56 <HAL_SYSTICK_Config>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d10f      	bne.n	8001018 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	d809      	bhi.n	8001012 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffe:	2200      	movs	r2, #0
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	f04f 30ff 	mov.w	r0, #4294967295
 8001006:	f001 fd7e 	bl	8002b06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800100a:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_InitTick+0x70>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6013      	str	r3, [r2, #0]
 8001010:	e007      	b.n	8001022 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e004      	b.n	8001022 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	e001      	b.n	8001022 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000008 	.word	0x20000008
 8001030:	20000000 	.word	0x20000000
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_IncTick+0x1c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <HAL_IncTick+0x20>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4413      	add	r3, r2
 8001046:	4a03      	ldr	r2, [pc, #12]	; (8001054 <HAL_IncTick+0x1c>)
 8001048:	6013      	str	r3, [r2, #0]
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	200002e8 	.word	0x200002e8
 8001058:	20000008 	.word	0x20000008

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	200002e8 	.word	0x200002e8

08001074 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	431a      	orrs	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	609a      	str	r2, [r3, #8]
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	609a      	str	r2, [r3, #8]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010dc:	b480      	push	{r7}
 80010de:	b087      	sub	sp, #28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3360      	adds	r3, #96	; 0x60
 80010ee:	461a      	mov	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <LL_ADC_SetOffset+0x44>)
 80010fe:	4013      	ands	r3, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	4313      	orrs	r3, r2
 800110c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001114:	bf00      	nop
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	03fff000 	.word	0x03fff000

08001124 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3360      	adds	r3, #96	; 0x60
 8001132:	461a      	mov	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3360      	adds	r3, #96	; 0x60
 8001160:	461a      	mov	r2, r3
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	431a      	orrs	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800117a:	bf00      	nop
 800117c:	371c      	adds	r7, #28
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001186:	b480      	push	{r7}
 8001188:	b087      	sub	sp, #28
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3360      	adds	r3, #96	; 0x60
 8001196:	461a      	mov	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80011b0:	bf00      	nop
 80011b2:	371c      	adds	r7, #28
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3360      	adds	r3, #96	; 0x60
 80011cc:	461a      	mov	r2, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	431a      	orrs	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80011e6:	bf00      	nop
 80011e8:	371c      	adds	r7, #28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80011f2:	b480      	push	{r7}
 80011f4:	b083      	sub	sp, #12
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
 80011fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	615a      	str	r2, [r3, #20]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001228:	2b00      	cmp	r3, #0
 800122a:	d101      	bne.n	8001230 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800123e:	b480      	push	{r7}
 8001240:	b087      	sub	sp, #28
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3330      	adds	r3, #48	; 0x30
 800124e:	461a      	mov	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	4413      	add	r3, r2
 800125c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f003 031f 	and.w	r3, r3, #31
 8001268:	211f      	movs	r1, #31
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	401a      	ands	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	0e9b      	lsrs	r3, r3, #26
 8001276:	f003 011f 	and.w	r1, r3, #31
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	f003 031f 	and.w	r3, r3, #31
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	431a      	orrs	r2, r3
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800128a:	bf00      	nop
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr

08001296 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001296:	b480      	push	{r7}
 8001298:	b087      	sub	sp, #28
 800129a:	af00      	add	r7, sp, #0
 800129c:	60f8      	str	r0, [r7, #12]
 800129e:	60b9      	str	r1, [r7, #8]
 80012a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3314      	adds	r3, #20
 80012a6:	461a      	mov	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	0e5b      	lsrs	r3, r3, #25
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	f003 0304 	and.w	r3, r3, #4
 80012b2:	4413      	add	r3, r2
 80012b4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	0d1b      	lsrs	r3, r3, #20
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	2107      	movs	r1, #7
 80012c4:	fa01 f303 	lsl.w	r3, r1, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	401a      	ands	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	0d1b      	lsrs	r3, r3, #20
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	431a      	orrs	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012e0:	bf00      	nop
 80012e2:	371c      	adds	r7, #28
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001304:	43db      	mvns	r3, r3
 8001306:	401a      	ands	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0318 	and.w	r3, r3, #24
 800130e:	4908      	ldr	r1, [pc, #32]	; (8001330 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001310:	40d9      	lsrs	r1, r3
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	400b      	ands	r3, r1
 8001316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800131a:	431a      	orrs	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	0007ffff 	.word	0x0007ffff

08001334 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f003 031f 	and.w	r3, r3, #31
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001360:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6093      	str	r3, [r2, #8]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001388:	d101      	bne.n	800138e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80013ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80013d8:	d101      	bne.n	80013de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001424:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001428:	f043 0202 	orr.w	r2, r3, #2
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <LL_ADC_IsEnabled+0x18>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <LL_ADC_IsEnabled+0x1a>
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001462:	b480      	push	{r7}
 8001464:	b083      	sub	sp, #12
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b02      	cmp	r3, #2
 8001474:	d101      	bne.n	800147a <LL_ADC_IsDisableOngoing+0x18>
 8001476:	2301      	movs	r3, #1
 8001478:	e000      	b.n	800147c <LL_ADC_IsDisableOngoing+0x1a>
 800147a:	2300      	movs	r3, #0
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001498:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800149c:	f043 0204 	orr.w	r2, r3, #4
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d101      	bne.n	80014c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b08      	cmp	r3, #8
 80014e8:	d101      	bne.n	80014ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b089      	sub	sp, #36	; 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e1a9      	b.n	800186a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001520:	2b00      	cmp	r3, #0
 8001522:	d109      	bne.n	8001538 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fb5d 	bl	8000be4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff19 	bl	8001374 <LL_ADC_IsDeepPowerDownEnabled>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff feff 	bl	8001350 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff34 	bl	80013c4 <LL_ADC_IsInternalRegulatorEnabled>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d115      	bne.n	800158e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff18 	bl	800139c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800156c:	4b9c      	ldr	r3, [pc, #624]	; (80017e0 <HAL_ADC_Init+0x2e4>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	4a9c      	ldr	r2, [pc, #624]	; (80017e4 <HAL_ADC_Init+0x2e8>)
 8001574:	fba2 2303 	umull	r2, r3, r2, r3
 8001578:	099b      	lsrs	r3, r3, #6
 800157a:	3301      	adds	r3, #1
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001580:	e002      	b.n	8001588 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	3b01      	subs	r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f9      	bne.n	8001582 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff16 	bl	80013c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10d      	bne.n	80015ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a2:	f043 0210 	orr.w	r2, r3, #16
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ae:	f043 0201 	orr.w	r2, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff ff76 	bl	80014b0 <LL_ADC_REG_IsConversionOngoing>
 80015c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f040 8142 	bne.w	8001858 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 813e 	bne.w	8001858 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015e4:	f043 0202 	orr.w	r2, r3, #2
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff23 	bl	800143c <LL_ADC_IsEnabled>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d141      	bne.n	8001680 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001604:	d004      	beq.n	8001610 <HAL_ADC_Init+0x114>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a77      	ldr	r2, [pc, #476]	; (80017e8 <HAL_ADC_Init+0x2ec>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d10f      	bne.n	8001630 <HAL_ADC_Init+0x134>
 8001610:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001614:	f7ff ff12 	bl	800143c <LL_ADC_IsEnabled>
 8001618:	4604      	mov	r4, r0
 800161a:	4873      	ldr	r0, [pc, #460]	; (80017e8 <HAL_ADC_Init+0x2ec>)
 800161c:	f7ff ff0e 	bl	800143c <LL_ADC_IsEnabled>
 8001620:	4603      	mov	r3, r0
 8001622:	4323      	orrs	r3, r4
 8001624:	2b00      	cmp	r3, #0
 8001626:	bf0c      	ite	eq
 8001628:	2301      	moveq	r3, #1
 800162a:	2300      	movne	r3, #0
 800162c:	b2db      	uxtb	r3, r3
 800162e:	e012      	b.n	8001656 <HAL_ADC_Init+0x15a>
 8001630:	486e      	ldr	r0, [pc, #440]	; (80017ec <HAL_ADC_Init+0x2f0>)
 8001632:	f7ff ff03 	bl	800143c <LL_ADC_IsEnabled>
 8001636:	4604      	mov	r4, r0
 8001638:	486d      	ldr	r0, [pc, #436]	; (80017f0 <HAL_ADC_Init+0x2f4>)
 800163a:	f7ff feff 	bl	800143c <LL_ADC_IsEnabled>
 800163e:	4603      	mov	r3, r0
 8001640:	431c      	orrs	r4, r3
 8001642:	486c      	ldr	r0, [pc, #432]	; (80017f4 <HAL_ADC_Init+0x2f8>)
 8001644:	f7ff fefa 	bl	800143c <LL_ADC_IsEnabled>
 8001648:	4603      	mov	r3, r0
 800164a:	4323      	orrs	r3, r4
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf0c      	ite	eq
 8001650:	2301      	moveq	r3, #1
 8001652:	2300      	movne	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d012      	beq.n	8001680 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001662:	d004      	beq.n	800166e <HAL_ADC_Init+0x172>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a5f      	ldr	r2, [pc, #380]	; (80017e8 <HAL_ADC_Init+0x2ec>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Init+0x176>
 800166e:	4a62      	ldr	r2, [pc, #392]	; (80017f8 <HAL_ADC_Init+0x2fc>)
 8001670:	e000      	b.n	8001674 <HAL_ADC_Init+0x178>
 8001672:	4a62      	ldr	r2, [pc, #392]	; (80017fc <HAL_ADC_Init+0x300>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4619      	mov	r1, r3
 800167a:	4610      	mov	r0, r2
 800167c:	f7ff fcfa 	bl	8001074 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7f5b      	ldrb	r3, [r3, #29]
 8001684:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800168a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001690:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001696:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800169e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016a0:	4313      	orrs	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d106      	bne.n	80016bc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b2:	3b01      	subs	r3, #1
 80016b4:	045b      	lsls	r3, r3, #17
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	4b48      	ldr	r3, [pc, #288]	; (8001800 <HAL_ADC_Init+0x304>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fee5 	bl	80014d6 <LL_ADC_INJ_IsConversionOngoing>
 800170c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d17f      	bne.n	8001814 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d17c      	bne.n	8001814 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800171e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001726:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001736:	f023 0302 	bic.w	r3, r3, #2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	69b9      	ldr	r1, [r7, #24]
 8001740:	430b      	orrs	r3, r1
 8001742:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d017      	beq.n	800177c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800175a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001764:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001768:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6911      	ldr	r1, [r2, #16]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	430b      	orrs	r3, r1
 8001776:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800177a:	e013      	b.n	80017a4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691a      	ldr	r2, [r3, #16]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800178a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800179c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d12a      	bne.n	8001804 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017c4:	4311      	orrs	r1, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80017ca:	4311      	orrs	r1, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80017d0:	430a      	orrs	r2, r1
 80017d2:	431a      	orrs	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f042 0201 	orr.w	r2, r2, #1
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	e019      	b.n	8001814 <HAL_ADC_Init+0x318>
 80017e0:	20000000 	.word	0x20000000
 80017e4:	053e2d63 	.word	0x053e2d63
 80017e8:	50000100 	.word	0x50000100
 80017ec:	50000400 	.word	0x50000400
 80017f0:	50000500 	.word	0x50000500
 80017f4:	50000600 	.word	0x50000600
 80017f8:	50000300 	.word	0x50000300
 80017fc:	50000700 	.word	0x50000700
 8001800:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d10c      	bne.n	8001836 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f023 010f 	bic.w	r1, r3, #15
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
 800182a:	1e5a      	subs	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
 8001834:	e007      	b.n	8001846 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 020f 	bic.w	r2, r2, #15
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184a:	f023 0303 	bic.w	r3, r3, #3
 800184e:	f043 0201 	orr.w	r2, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	65da      	str	r2, [r3, #92]	; 0x5c
 8001856:	e007      	b.n	8001868 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	f043 0210 	orr.w	r2, r3, #16
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001868:	7ffb      	ldrb	r3, [r7, #31]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd90      	pop	{r4, r7, pc}
 8001872:	bf00      	nop

08001874 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001888:	d004      	beq.n	8001894 <HAL_ADC_Start_DMA+0x20>
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a5a      	ldr	r2, [pc, #360]	; (80019f8 <HAL_ADC_Start_DMA+0x184>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d101      	bne.n	8001898 <HAL_ADC_Start_DMA+0x24>
 8001894:	4b59      	ldr	r3, [pc, #356]	; (80019fc <HAL_ADC_Start_DMA+0x188>)
 8001896:	e000      	b.n	800189a <HAL_ADC_Start_DMA+0x26>
 8001898:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <HAL_ADC_Start_DMA+0x18c>)
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff fd4a 	bl	8001334 <LL_ADC_GetMultimode>
 80018a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fe02 	bl	80014b0 <LL_ADC_REG_IsConversionOngoing>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 809b 	bne.w	80019ea <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_ADC_Start_DMA+0x4e>
 80018be:	2302      	movs	r3, #2
 80018c0:	e096      	b.n	80019f0 <HAL_ADC_Start_DMA+0x17c>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a4d      	ldr	r2, [pc, #308]	; (8001a04 <HAL_ADC_Start_DMA+0x190>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d008      	beq.n	80018e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	2b05      	cmp	r3, #5
 80018de:	d002      	beq.n	80018e6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	d17a      	bne.n	80019dc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 fcec 	bl	80022c4 <ADC_Enable>
 80018ec:	4603      	mov	r3, r0
 80018ee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018f0:	7dfb      	ldrb	r3, [r7, #23]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d16d      	bne.n	80019d2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a3a      	ldr	r2, [pc, #232]	; (80019f8 <HAL_ADC_Start_DMA+0x184>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d009      	beq.n	8001928 <HAL_ADC_Start_DMA+0xb4>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a3b      	ldr	r2, [pc, #236]	; (8001a08 <HAL_ADC_Start_DMA+0x194>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d002      	beq.n	8001924 <HAL_ADC_Start_DMA+0xb0>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	e003      	b.n	800192c <HAL_ADC_Start_DMA+0xb8>
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_ADC_Start_DMA+0x198>)
 8001926:	e001      	b.n	800192c <HAL_ADC_Start_DMA+0xb8>
 8001928:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	4293      	cmp	r3, r2
 8001932:	d002      	beq.n	800193a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d105      	bne.n	8001946 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d006      	beq.n	8001960 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	f023 0206 	bic.w	r2, r3, #6
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	661a      	str	r2, [r3, #96]	; 0x60
 800195e:	e002      	b.n	8001966 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196a:	4a29      	ldr	r2, [pc, #164]	; (8001a10 <HAL_ADC_Start_DMA+0x19c>)
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001972:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <HAL_ADC_Start_DMA+0x1a0>)
 8001974:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197a:	4a27      	ldr	r2, [pc, #156]	; (8001a18 <HAL_ADC_Start_DMA+0x1a4>)
 800197c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	221c      	movs	r2, #28
 8001984:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f042 0210 	orr.w	r2, r2, #16
 800199c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f042 0201 	orr.w	r2, r2, #1
 80019ac:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	3340      	adds	r3, #64	; 0x40
 80019b8:	4619      	mov	r1, r3
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f001 f97f 	bl	8002cc0 <HAL_DMA_Start_IT>
 80019c2:	4603      	mov	r3, r0
 80019c4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fd5c 	bl	8001488 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80019d0:	e00d      	b.n	80019ee <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80019da:	e008      	b.n	80019ee <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80019e8:	e001      	b.n	80019ee <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019ea:	2302      	movs	r3, #2
 80019ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	50000100 	.word	0x50000100
 80019fc:	50000300 	.word	0x50000300
 8001a00:	50000700 	.word	0x50000700
 8001a04:	50000600 	.word	0x50000600
 8001a08:	50000500 	.word	0x50000500
 8001a0c:	50000400 	.word	0x50000400
 8001a10:	080024af 	.word	0x080024af
 8001a14:	08002587 	.word	0x08002587
 8001a18:	080025a3 	.word	0x080025a3

08001a1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0b6      	sub	sp, #216	; 0xd8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d102      	bne.n	8001a68 <HAL_ADC_ConfigChannel+0x24>
 8001a62:	2302      	movs	r3, #2
 8001a64:	f000 bc13 	b.w	800228e <HAL_ADC_ConfigChannel+0x84a>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fd1b 	bl	80014b0 <LL_ADC_REG_IsConversionOngoing>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f040 83f3 	bne.w	8002268 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6859      	ldr	r1, [r3, #4]
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f7ff fbd5 	bl	800123e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fd09 	bl	80014b0 <LL_ADC_REG_IsConversionOngoing>
 8001a9e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fd15 	bl	80014d6 <LL_ADC_INJ_IsConversionOngoing>
 8001aac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ab0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f040 81d9 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 81d4 	bne.w	8001e6c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001acc:	d10f      	bne.n	8001aee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f7ff fbdc 	bl	8001296 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fb83 	bl	80011f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001aec:	e00e      	b.n	8001b0c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6819      	ldr	r1, [r3, #0]
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	461a      	mov	r2, r3
 8001afc:	f7ff fbcb 	bl	8001296 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2100      	movs	r1, #0
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fb73 	bl	80011f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	695a      	ldr	r2, [r3, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	08db      	lsrs	r3, r3, #3
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d022      	beq.n	8001b74 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6919      	ldr	r1, [r3, #16]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b3e:	f7ff facd 	bl	80010dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	6919      	ldr	r1, [r3, #16]
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f7ff fb19 	bl	8001186 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d102      	bne.n	8001b6a <HAL_ADC_ConfigChannel+0x126>
 8001b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b68:	e000      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x128>
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	f7ff fb25 	bl	80011bc <LL_ADC_SetOffsetSaturation>
 8001b72:	e17b      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fad2 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10a      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x15c>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fac7 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001b96:	4603      	mov	r3, r0
 8001b98:	0e9b      	lsrs	r3, r3, #26
 8001b9a:	f003 021f 	and.w	r2, r3, #31
 8001b9e:	e01e      	b.n	8001bde <HAL_ADC_ConfigChannel+0x19a>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fabc 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001bce:	2320      	movs	r3, #32
 8001bd0:	e004      	b.n	8001bdc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001bd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d105      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x1b2>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0e9b      	lsrs	r3, r3, #26
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	e018      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x1e4>
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001c1a:	2320      	movs	r3, #32
 8001c1c:	e004      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001c1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d106      	bne.n	8001c3a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fa8b 	bl	8001150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2101      	movs	r1, #1
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fa6f 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10a      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x222>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fa64 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	e01e      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x260>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fa59 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001c94:	2320      	movs	r3, #32
 8001c96:	e004      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001c98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x278>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	e018      	b.n	8001cee <HAL_ADC_ConfigChannel+0x2aa>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001cd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e004      	b.n	8001cee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001ce4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d106      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fa28 	bl	8001150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2102      	movs	r1, #2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fa0c 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10a      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x2e8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff fa01 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	f003 021f 	and.w	r2, r3, #31
 8001d2a:	e01e      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x326>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2102      	movs	r1, #2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f9f6 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e004      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d105      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x33e>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0e9b      	lsrs	r3, r3, #26
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	e016      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x36c>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001da2:	2320      	movs	r3, #32
 8001da4:	e004      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d106      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2200      	movs	r2, #0
 8001dba:	2102      	movs	r1, #2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f9c7 	bl	8001150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2103      	movs	r1, #3
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff f9ab 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <HAL_ADC_ConfigChannel+0x3aa>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2103      	movs	r1, #3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f9a0 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	f003 021f 	and.w	r2, r3, #31
 8001dec:	e017      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x3da>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2103      	movs	r1, #3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f995 	bl	8001124 <LL_ADC_GetOffsetChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e08:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001e10:	2320      	movs	r3, #32
 8001e12:	e003      	b.n	8001e1c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e16:	fab3 f383 	clz	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d105      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x3f2>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	0e9b      	lsrs	r3, r3, #26
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	e011      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x416>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	e003      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e54:	fab3 f383 	clz	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d106      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2200      	movs	r2, #0
 8001e64:	2103      	movs	r1, #3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f972 	bl	8001150 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fae3 	bl	800143c <LL_ADC_IsEnabled>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 813d 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f7ff fa2e 	bl	80012ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4aa2      	ldr	r2, [pc, #648]	; (8002120 <HAL_ADC_ConfigChannel+0x6dc>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f040 812e 	bne.w	80020f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x480>
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	0e9b      	lsrs	r3, r3, #26
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e019      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x4b4>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ecc:	fa93 f3a3 	rbit	r3, r3
 8001ed0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ed4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001edc:	2320      	movs	r3, #32
 8001ede:	e003      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001ee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	3301      	adds	r3, #1
 8001eea:	f003 031f 	and.w	r3, r3, #31
 8001eee:	2b09      	cmp	r3, #9
 8001ef0:	bf94      	ite	ls
 8001ef2:	2301      	movls	r3, #1
 8001ef4:	2300      	movhi	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d079      	beq.n	8001ff0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d107      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x4d4>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	3301      	adds	r3, #1
 8001f10:	069b      	lsls	r3, r3, #26
 8001f12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f16:	e015      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x500>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f20:	fa93 f3a3 	rbit	r3, r3
 8001f24:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f28:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001f30:	2320      	movs	r3, #32
 8001f32:	e003      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f36:	fab3 f383 	clz	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	069b      	lsls	r3, r3, #26
 8001f40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x520>
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0e9b      	lsrs	r3, r3, #26
 8001f56:	3301      	adds	r3, #1
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	e017      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x550>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f74:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001f7c:	2320      	movs	r3, #32
 8001f7e:	e003      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	ea42 0103 	orr.w	r1, r2, r3
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10a      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x576>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0e9b      	lsrs	r3, r3, #26
 8001faa:	3301      	adds	r3, #1
 8001fac:	f003 021f 	and.w	r2, r3, #31
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4413      	add	r3, r2
 8001fb6:	051b      	lsls	r3, r3, #20
 8001fb8:	e018      	b.n	8001fec <HAL_ADC_ConfigChannel+0x5a8>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc2:	fa93 f3a3 	rbit	r3, r3
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e003      	b.n	8001fde <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fec:	430b      	orrs	r3, r1
 8001fee:	e07e      	b.n	80020ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_ADC_ConfigChannel+0x5c8>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	3301      	adds	r3, #1
 8002004:	069b      	lsls	r3, r3, #26
 8002006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800200a:	e015      	b.n	8002038 <HAL_ADC_ConfigChannel+0x5f4>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002014:	fa93 f3a3 	rbit	r3, r3
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800201a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800201c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002024:	2320      	movs	r3, #32
 8002026:	e003      	b.n	8002030 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	3301      	adds	r3, #1
 8002032:	069b      	lsls	r3, r3, #26
 8002034:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x614>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	0e9b      	lsrs	r3, r3, #26
 800204a:	3301      	adds	r3, #1
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	2101      	movs	r1, #1
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	e017      	b.n	8002088 <HAL_ADC_ConfigChannel+0x644>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205e:	6a3b      	ldr	r3, [r7, #32]
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	61fb      	str	r3, [r7, #28]
  return result;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002070:	2320      	movs	r3, #32
 8002072:	e003      	b.n	800207c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	3301      	adds	r3, #1
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	2101      	movs	r1, #1
 8002084:	fa01 f303 	lsl.w	r3, r1, r3
 8002088:	ea42 0103 	orr.w	r1, r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10d      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x670>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	0e9b      	lsrs	r3, r3, #26
 800209e:	3301      	adds	r3, #1
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	3b1e      	subs	r3, #30
 80020ac:	051b      	lsls	r3, r3, #20
 80020ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020b2:	e01b      	b.n	80020ec <HAL_ADC_ConfigChannel+0x6a8>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa93 f3a3 	rbit	r3, r3
 80020c0:	613b      	str	r3, [r7, #16]
  return result;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e003      	b.n	80020d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	f003 021f 	and.w	r2, r3, #31
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	3b1e      	subs	r3, #30
 80020e6:	051b      	lsls	r3, r3, #20
 80020e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020ec:	430b      	orrs	r3, r1
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	6892      	ldr	r2, [r2, #8]
 80020f2:	4619      	mov	r1, r3
 80020f4:	f7ff f8cf 	bl	8001296 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_ADC_ConfigChannel+0x6e0>)
 80020fe:	4013      	ands	r3, r2
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 80be 	beq.w	8002282 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800210e:	d004      	beq.n	800211a <HAL_ADC_ConfigChannel+0x6d6>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a04      	ldr	r2, [pc, #16]	; (8002128 <HAL_ADC_ConfigChannel+0x6e4>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d10a      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x6ec>
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_ADC_ConfigChannel+0x6e8>)
 800211c:	e009      	b.n	8002132 <HAL_ADC_ConfigChannel+0x6ee>
 800211e:	bf00      	nop
 8002120:	407f0000 	.word	0x407f0000
 8002124:	80080000 	.word	0x80080000
 8002128:	50000100 	.word	0x50000100
 800212c:	50000300 	.word	0x50000300
 8002130:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_ADC_ConfigChannel+0x854>)
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe ffc4 	bl	80010c0 <LL_ADC_GetCommonPathInternalCh>
 8002138:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a56      	ldr	r2, [pc, #344]	; (800229c <HAL_ADC_ConfigChannel+0x858>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d004      	beq.n	8002150 <HAL_ADC_ConfigChannel+0x70c>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a55      	ldr	r2, [pc, #340]	; (80022a0 <HAL_ADC_ConfigChannel+0x85c>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d13a      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d134      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002164:	d005      	beq.n	8002172 <HAL_ADC_ConfigChannel+0x72e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a4e      	ldr	r2, [pc, #312]	; (80022a4 <HAL_ADC_ConfigChannel+0x860>)
 800216c:	4293      	cmp	r3, r2
 800216e:	f040 8085 	bne.w	800227c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217a:	d004      	beq.n	8002186 <HAL_ADC_ConfigChannel+0x742>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a49      	ldr	r2, [pc, #292]	; (80022a8 <HAL_ADC_ConfigChannel+0x864>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d101      	bne.n	800218a <HAL_ADC_ConfigChannel+0x746>
 8002186:	4a49      	ldr	r2, [pc, #292]	; (80022ac <HAL_ADC_ConfigChannel+0x868>)
 8002188:	e000      	b.n	800218c <HAL_ADC_ConfigChannel+0x748>
 800218a:	4a43      	ldr	r2, [pc, #268]	; (8002298 <HAL_ADC_ConfigChannel+0x854>)
 800218c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002190:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002194:	4619      	mov	r1, r3
 8002196:	4610      	mov	r0, r2
 8002198:	f7fe ff7f 	bl	800109a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800219c:	4b44      	ldr	r3, [pc, #272]	; (80022b0 <HAL_ADC_ConfigChannel+0x86c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	4a44      	ldr	r2, [pc, #272]	; (80022b4 <HAL_ADC_ConfigChannel+0x870>)
 80021a4:	fba2 2303 	umull	r2, r3, r2, r3
 80021a8:	099b      	lsrs	r3, r3, #6
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021b6:	e002      	b.n	80021be <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021c4:	e05a      	b.n	800227c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a3b      	ldr	r2, [pc, #236]	; (80022b8 <HAL_ADC_ConfigChannel+0x874>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d125      	bne.n	800221c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d11f      	bne.n	800221c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a31      	ldr	r2, [pc, #196]	; (80022a8 <HAL_ADC_ConfigChannel+0x864>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d104      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x7ac>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a34      	ldr	r2, [pc, #208]	; (80022bc <HAL_ADC_ConfigChannel+0x878>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d047      	beq.n	8002280 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f8:	d004      	beq.n	8002204 <HAL_ADC_ConfigChannel+0x7c0>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a2a      	ldr	r2, [pc, #168]	; (80022a8 <HAL_ADC_ConfigChannel+0x864>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d101      	bne.n	8002208 <HAL_ADC_ConfigChannel+0x7c4>
 8002204:	4a29      	ldr	r2, [pc, #164]	; (80022ac <HAL_ADC_ConfigChannel+0x868>)
 8002206:	e000      	b.n	800220a <HAL_ADC_ConfigChannel+0x7c6>
 8002208:	4a23      	ldr	r2, [pc, #140]	; (8002298 <HAL_ADC_ConfigChannel+0x854>)
 800220a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800220e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002212:	4619      	mov	r1, r3
 8002214:	4610      	mov	r0, r2
 8002216:	f7fe ff40 	bl	800109a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800221a:	e031      	b.n	8002280 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_ADC_ConfigChannel+0x87c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d12d      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002226:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800222a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d127      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <HAL_ADC_ConfigChannel+0x864>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d022      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002244:	d004      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x80c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <HAL_ADC_ConfigChannel+0x864>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d101      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x810>
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_ADC_ConfigChannel+0x868>)
 8002252:	e000      	b.n	8002256 <HAL_ADC_ConfigChannel+0x812>
 8002254:	4a10      	ldr	r2, [pc, #64]	; (8002298 <HAL_ADC_ConfigChannel+0x854>)
 8002256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800225a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f7fe ff1a 	bl	800109a <LL_ADC_SetCommonPathInternalCh>
 8002266:	e00c      	b.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	f043 0220 	orr.w	r2, r3, #32
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800227a:	e002      	b.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800227c:	bf00      	nop
 800227e:	e000      	b.n	8002282 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002280:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800228a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800228e:	4618      	mov	r0, r3
 8002290:	37d8      	adds	r7, #216	; 0xd8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	50000700 	.word	0x50000700
 800229c:	c3210000 	.word	0xc3210000
 80022a0:	90c00010 	.word	0x90c00010
 80022a4:	50000600 	.word	0x50000600
 80022a8:	50000100 	.word	0x50000100
 80022ac:	50000300 	.word	0x50000300
 80022b0:	20000000 	.word	0x20000000
 80022b4:	053e2d63 	.word	0x053e2d63
 80022b8:	c7520000 	.word	0xc7520000
 80022bc:	50000500 	.word	0x50000500
 80022c0:	cb840000 	.word	0xcb840000

080022c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff f8b1 	bl	800143c <LL_ADC_IsEnabled>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d176      	bne.n	80023ce <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	4b3c      	ldr	r3, [pc, #240]	; (80023d8 <ADC_Enable+0x114>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00d      	beq.n	800230a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	f043 0210 	orr.w	r2, r3, #16
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e062      	b.n	80023d0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f86c 	bl	80013ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800231c:	d004      	beq.n	8002328 <ADC_Enable+0x64>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a2e      	ldr	r2, [pc, #184]	; (80023dc <ADC_Enable+0x118>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d101      	bne.n	800232c <ADC_Enable+0x68>
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <ADC_Enable+0x11c>)
 800232a:	e000      	b.n	800232e <ADC_Enable+0x6a>
 800232c:	4b2d      	ldr	r3, [pc, #180]	; (80023e4 <ADC_Enable+0x120>)
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fec6 	bl	80010c0 <LL_ADC_GetCommonPathInternalCh>
 8002334:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800233a:	2b00      	cmp	r3, #0
 800233c:	d013      	beq.n	8002366 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <ADC_Enable+0x124>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	099b      	lsrs	r3, r3, #6
 8002344:	4a29      	ldr	r2, [pc, #164]	; (80023ec <ADC_Enable+0x128>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	099b      	lsrs	r3, r3, #6
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002358:	e002      	b.n	8002360 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3b01      	subs	r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f9      	bne.n	800235a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002366:	f7fe fe79 	bl	800105c <HAL_GetTick>
 800236a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800236c:	e028      	b.n	80023c0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff f862 	bl	800143c <LL_ADC_IsEnabled>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d104      	bne.n	8002388 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff f832 	bl	80013ec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002388:	f7fe fe68 	bl	800105c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d914      	bls.n	80023c0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d00d      	beq.n	80023c0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a8:	f043 0210 	orr.w	r2, r3, #16
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e007      	b.n	80023d0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d1cf      	bne.n	800236e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	8000003f 	.word	0x8000003f
 80023dc:	50000100 	.word	0x50000100
 80023e0:	50000300 	.word	0x50000300
 80023e4:	50000700 	.word	0x50000700
 80023e8:	20000000 	.word	0x20000000
 80023ec:	053e2d63 	.word	0x053e2d63

080023f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff f830 	bl	8001462 <LL_ADC_IsDisableOngoing>
 8002402:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f817 	bl	800143c <LL_ADC_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d047      	beq.n	80024a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d144      	bne.n	80024a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 030d 	and.w	r3, r3, #13
 8002424:	2b01      	cmp	r3, #1
 8002426:	d10c      	bne.n	8002442 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fff1 	bl	8001414 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2203      	movs	r2, #3
 8002438:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800243a:	f7fe fe0f 	bl	800105c <HAL_GetTick>
 800243e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002440:	e029      	b.n	8002496 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002446:	f043 0210 	orr.w	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002452:	f043 0201 	orr.w	r2, r3, #1
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e023      	b.n	80024a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800245e:	f7fe fdfd 	bl	800105c <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d914      	bls.n	8002496 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00d      	beq.n	8002496 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	f043 0210 	orr.w	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e007      	b.n	80024a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1dc      	bne.n	800245e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d14b      	bne.n	8002560 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024cc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d021      	beq.n	8002526 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fe96 	bl	8001218 <LL_ADC_REG_IsTriggerSourceSWStart>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d032      	beq.n	8002558 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d12b      	bne.n	8002558 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d11f      	bne.n	8002558 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	f043 0201 	orr.w	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	65da      	str	r2, [r3, #92]	; 0x5c
 8002524:	e018      	b.n	8002558 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d111      	bne.n	8002558 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002538:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	f043 0201 	orr.w	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f7fe facb 	bl	8000af4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800255e:	e00e      	b.n	800257e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800256c:	68f8      	ldr	r0, [r7, #12]
 800256e:	f7ff fa5f 	bl	8001a30 <HAL_ADC_ErrorCallback>
}
 8002572:	e004      	b.n	800257e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
}
 800257e:	bf00      	nop
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7ff fa41 	bl	8001a1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c0:	f043 0204 	orr.w	r2, r3, #4
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7ff fa31 	bl	8001a30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <LL_ADC_IsEnabled>:
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <LL_ADC_IsEnabled+0x18>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <LL_ADC_IsEnabled+0x1a>
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <LL_ADC_StartCalibration>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800260e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002618:	4313      	orrs	r3, r2
 800261a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	609a      	str	r2, [r3, #8]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_ADC_IsCalibrationOnGoing>:
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800263e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002642:	d101      	bne.n	8002648 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002644:	2301      	movs	r3, #1
 8002646:	e000      	b.n	800264a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_ADC_REG_IsConversionOngoing>:
{
 8002656:	b480      	push	{r7}
 8002658:	b083      	sub	sp, #12
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b04      	cmp	r3, #4
 8002668:	d101      	bne.n	800266e <LL_ADC_REG_IsConversionOngoing+0x18>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002690:	2b01      	cmp	r3, #1
 8002692:	d101      	bne.n	8002698 <HAL_ADCEx_Calibration_Start+0x1c>
 8002694:	2302      	movs	r3, #2
 8002696:	e04d      	b.n	8002734 <HAL_ADCEx_Calibration_Start+0xb8>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff fea5 	bl	80023f0 <ADC_Disable>
 80026a6:	4603      	mov	r3, r0
 80026a8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d136      	bne.n	800271e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026b8:	f023 0302 	bic.w	r3, r3, #2
 80026bc:	f043 0202 	orr.w	r2, r3, #2
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff96 	bl	80025fc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026d0:	e014      	b.n	80026fc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	3301      	adds	r3, #1
 80026d6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_ADCEx_Calibration_Start+0xc0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d90d      	bls.n	80026fc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	f023 0312 	bic.w	r3, r3, #18
 80026e8:	f043 0210 	orr.w	r2, r3, #16
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e01b      	b.n	8002734 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff94 	bl	800262e <LL_ADC_IsCalibrationOnGoing>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1e2      	bne.n	80026d2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	f023 0303 	bic.w	r3, r3, #3
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	65da      	str	r2, [r3, #92]	; 0x5c
 800271c:	e005      	b.n	800272a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	f043 0210 	orr.w	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	0004de01 	.word	0x0004de01

08002740 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b0a1      	sub	sp, #132	; 0x84
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800275a:	2302      	movs	r3, #2
 800275c:	e0e7      	b.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002766:	2300      	movs	r3, #0
 8002768:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800276a:	2300      	movs	r3, #0
 800276c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002776:	d102      	bne.n	800277e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002778:	4b6f      	ldr	r3, [pc, #444]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	e009      	b.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6e      	ldr	r2, [pc, #440]	; (800293c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d102      	bne.n	800278e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002788:	4b6d      	ldr	r3, [pc, #436]	; (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	e001      	b.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0be      	b.n	800292e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ff4f 	bl	8002656 <LL_ADC_REG_IsConversionOngoing>
 80027b8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff49 	bl	8002656 <LL_ADC_REG_IsConversionOngoing>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 80a0 	bne.w	800290c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80027cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 809c 	bne.w	800290c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027dc:	d004      	beq.n	80027e8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a55      	ldr	r2, [pc, #340]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d101      	bne.n	80027ec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80027e8:	4b56      	ldr	r3, [pc, #344]	; (8002944 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80027ea:	e000      	b.n	80027ee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80027ec:	4b56      	ldr	r3, [pc, #344]	; (8002948 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80027ee:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d04b      	beq.n	8002890 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800280a:	035b      	lsls	r3, r3, #13
 800280c:	430b      	orrs	r3, r1
 800280e:	431a      	orrs	r2, r3
 8002810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002812:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800281c:	d004      	beq.n	8002828 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a45      	ldr	r2, [pc, #276]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d10f      	bne.n	8002848 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002828:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800282c:	f7ff fed3 	bl	80025d6 <LL_ADC_IsEnabled>
 8002830:	4604      	mov	r4, r0
 8002832:	4841      	ldr	r0, [pc, #260]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002834:	f7ff fecf 	bl	80025d6 <LL_ADC_IsEnabled>
 8002838:	4603      	mov	r3, r0
 800283a:	4323      	orrs	r3, r4
 800283c:	2b00      	cmp	r3, #0
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	e012      	b.n	800286e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002848:	483c      	ldr	r0, [pc, #240]	; (800293c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800284a:	f7ff fec4 	bl	80025d6 <LL_ADC_IsEnabled>
 800284e:	4604      	mov	r4, r0
 8002850:	483b      	ldr	r0, [pc, #236]	; (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002852:	f7ff fec0 	bl	80025d6 <LL_ADC_IsEnabled>
 8002856:	4603      	mov	r3, r0
 8002858:	431c      	orrs	r4, r3
 800285a:	483c      	ldr	r0, [pc, #240]	; (800294c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800285c:	f7ff febb 	bl	80025d6 <LL_ADC_IsEnabled>
 8002860:	4603      	mov	r3, r0
 8002862:	4323      	orrs	r3, r4
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d056      	beq.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800287a:	f023 030f 	bic.w	r3, r3, #15
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	6811      	ldr	r1, [r2, #0]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	6892      	ldr	r2, [r2, #8]
 8002886:	430a      	orrs	r2, r1
 8002888:	431a      	orrs	r2, r3
 800288a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800288e:	e047      	b.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800289a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028a4:	d004      	beq.n	80028b0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a23      	ldr	r2, [pc, #140]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d10f      	bne.n	80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80028b0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028b4:	f7ff fe8f 	bl	80025d6 <LL_ADC_IsEnabled>
 80028b8:	4604      	mov	r4, r0
 80028ba:	481f      	ldr	r0, [pc, #124]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028bc:	f7ff fe8b 	bl	80025d6 <LL_ADC_IsEnabled>
 80028c0:	4603      	mov	r3, r0
 80028c2:	4323      	orrs	r3, r4
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e012      	b.n	80028f6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80028d0:	481a      	ldr	r0, [pc, #104]	; (800293c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028d2:	f7ff fe80 	bl	80025d6 <LL_ADC_IsEnabled>
 80028d6:	4604      	mov	r4, r0
 80028d8:	4819      	ldr	r0, [pc, #100]	; (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028da:	f7ff fe7c 	bl	80025d6 <LL_ADC_IsEnabled>
 80028de:	4603      	mov	r3, r0
 80028e0:	431c      	orrs	r4, r3
 80028e2:	481a      	ldr	r0, [pc, #104]	; (800294c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80028e4:	f7ff fe77 	bl	80025d6 <LL_ADC_IsEnabled>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4323      	orrs	r3, r4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d012      	beq.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002902:	f023 030f 	bic.w	r3, r3, #15
 8002906:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002908:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800290a:	e009      	b.n	8002920 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002910:	f043 0220 	orr.w	r2, r3, #32
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800291e:	e000      	b.n	8002922 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002920:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800292a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800292e:	4618      	mov	r0, r3
 8002930:	3784      	adds	r7, #132	; 0x84
 8002932:	46bd      	mov	sp, r7
 8002934:	bd90      	pop	{r4, r7, pc}
 8002936:	bf00      	nop
 8002938:	50000100 	.word	0x50000100
 800293c:	50000400 	.word	0x50000400
 8002940:	50000500 	.word	0x50000500
 8002944:	50000300 	.word	0x50000300
 8002948:	50000700 	.word	0x50000700
 800294c:	50000600 	.word	0x50000600

08002950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800296c:	4013      	ands	r3, r2
 800296e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800297c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002982:	4a04      	ldr	r2, [pc, #16]	; (8002994 <__NVIC_SetPriorityGrouping+0x44>)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60d3      	str	r3, [r2, #12]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800299c:	4b04      	ldr	r3, [pc, #16]	; (80029b0 <__NVIC_GetPriorityGrouping+0x18>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	f003 0307 	and.w	r3, r3, #7
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db0b      	blt.n	80029de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c6:	79fb      	ldrb	r3, [r7, #7]
 80029c8:	f003 021f 	and.w	r2, r3, #31
 80029cc:	4907      	ldr	r1, [pc, #28]	; (80029ec <__NVIC_EnableIRQ+0x38>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	2001      	movs	r0, #1
 80029d6:	fa00 f202 	lsl.w	r2, r0, r2
 80029da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029de:	bf00      	nop
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	e000e100 	.word	0xe000e100

080029f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	db0a      	blt.n	8002a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	490c      	ldr	r1, [pc, #48]	; (8002a3c <__NVIC_SetPriority+0x4c>)
 8002a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0e:	0112      	lsls	r2, r2, #4
 8002a10:	b2d2      	uxtb	r2, r2
 8002a12:	440b      	add	r3, r1
 8002a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a18:	e00a      	b.n	8002a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4908      	ldr	r1, [pc, #32]	; (8002a40 <__NVIC_SetPriority+0x50>)
 8002a20:	79fb      	ldrb	r3, [r7, #7]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	3b04      	subs	r3, #4
 8002a28:	0112      	lsls	r2, r2, #4
 8002a2a:	b2d2      	uxtb	r2, r2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	761a      	strb	r2, [r3, #24]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100
 8002a40:	e000ed00 	.word	0xe000ed00

08002a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f1c3 0307 	rsb	r3, r3, #7
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	bf28      	it	cs
 8002a62:	2304      	movcs	r3, #4
 8002a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3304      	adds	r3, #4
 8002a6a:	2b06      	cmp	r3, #6
 8002a6c:	d902      	bls.n	8002a74 <NVIC_EncodePriority+0x30>
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3b03      	subs	r3, #3
 8002a72:	e000      	b.n	8002a76 <NVIC_EncodePriority+0x32>
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a78:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	401a      	ands	r2, r3
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	fa01 f303 	lsl.w	r3, r1, r3
 8002a96:	43d9      	mvns	r1, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9c:	4313      	orrs	r3, r2
         );
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3724      	adds	r7, #36	; 0x24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
	...

08002aac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002abc:	d301      	bcc.n	8002ac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00f      	b.n	8002ae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <SysTick_Config+0x40>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aca:	210f      	movs	r1, #15
 8002acc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad0:	f7ff ff8e 	bl	80029f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <SysTick_Config+0x40>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ada:	4b04      	ldr	r3, [pc, #16]	; (8002aec <SysTick_Config+0x40>)
 8002adc:	2207      	movs	r2, #7
 8002ade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3708      	adds	r7, #8
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	e000e010 	.word	0xe000e010

08002af0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff29 	bl	8002950 <__NVIC_SetPriorityGrouping>
}
 8002afe:	bf00      	nop
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b086      	sub	sp, #24
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	60b9      	str	r1, [r7, #8]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b14:	f7ff ff40 	bl	8002998 <__NVIC_GetPriorityGrouping>
 8002b18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f7ff ff90 	bl	8002a44 <NVIC_EncodePriority>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff5f 	bl	80029f0 <__NVIC_SetPriority>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff33 	bl	80029b4 <__NVIC_EnableIRQ>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffa4 	bl	8002aac <SysTick_Config>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e08d      	b.n	8002c9e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b47      	ldr	r3, [pc, #284]	; (8002ca8 <HAL_DMA_Init+0x138>)
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d80f      	bhi.n	8002bae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	4b45      	ldr	r3, [pc, #276]	; (8002cac <HAL_DMA_Init+0x13c>)
 8002b96:	4413      	add	r3, r2
 8002b98:	4a45      	ldr	r2, [pc, #276]	; (8002cb0 <HAL_DMA_Init+0x140>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	009a      	lsls	r2, r3, #2
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a42      	ldr	r2, [pc, #264]	; (8002cb4 <HAL_DMA_Init+0x144>)
 8002baa:	641a      	str	r2, [r3, #64]	; 0x40
 8002bac:	e00e      	b.n	8002bcc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <HAL_DMA_Init+0x148>)
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a3d      	ldr	r2, [pc, #244]	; (8002cb0 <HAL_DMA_Init+0x140>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	009a      	lsls	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <HAL_DMA_Init+0x14c>)
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a1b      	ldr	r3, [r3, #32]
 8002c0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f9b6 	bl	8002f90 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c2c:	d102      	bne.n	8002c34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c48:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <HAL_DMA_Init+0x104>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d80c      	bhi.n	8002c74 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f9d6 	bl	800300c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	e008      	b.n	8002c86 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40020407 	.word	0x40020407
 8002cac:	bffdfff8 	.word	0xbffdfff8
 8002cb0:	cccccccd 	.word	0xcccccccd
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	bffdfbf8 	.word	0xbffdfbf8
 8002cbc:	40020400 	.word	0x40020400

08002cc0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_DMA_Start_IT+0x20>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e066      	b.n	8002dae <HAL_DMA_Start_IT+0xee>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d155      	bne.n	8002da0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0201 	bic.w	r2, r2, #1
 8002d10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	68b9      	ldr	r1, [r7, #8]
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f000 f8fb 	bl	8002f14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 020e 	orr.w	r2, r2, #14
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e00f      	b.n	8002d58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0204 	bic.w	r2, r2, #4
 8002d46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 020a 	orr.w	r2, r2, #10
 8002d56:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d007      	beq.n	8002d76 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d74:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d8c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f042 0201 	orr.w	r2, r2, #1
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	e005      	b.n	8002dac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
 8002daa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b084      	sub	sp, #16
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d026      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x7a>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d021      	beq.n	8002e30 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d107      	bne.n	8002e0a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0204 	bic.w	r2, r2, #4
 8002e08:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f003 021f 	and.w	r2, r3, #31
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2104      	movs	r1, #4
 8002e18:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d071      	beq.n	8002f0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e2e:	e06c      	b.n	8002f0a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	2202      	movs	r2, #2
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d02e      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d029      	beq.n	8002ea2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 020a 	bic.w	r2, r2, #10
 8002e6a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e78:	f003 021f 	and.w	r2, r3, #31
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	2102      	movs	r1, #2
 8002e82:	fa01 f202 	lsl.w	r2, r1, r2
 8002e86:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d038      	beq.n	8002f0a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ea0:	e033      	b.n	8002f0a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	2208      	movs	r2, #8
 8002eac:	409a      	lsls	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d02a      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d025      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 020e 	bic.w	r2, r2, #14
 8002ece:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	f003 021f 	and.w	r2, r3, #31
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	2101      	movs	r1, #1
 8002ede:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d004      	beq.n	8002f0c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
}
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f2a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f3c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f003 021f 	and.w	r2, r3, #31
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d108      	bne.n	8002f74 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f72:	e007      	b.n	8002f84 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]
}
 8002f84:	bf00      	nop
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4b16      	ldr	r3, [pc, #88]	; (8002ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d802      	bhi.n	8002faa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002fa4:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e001      	b.n	8002fae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002fac:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3b08      	subs	r3, #8
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc8:	089b      	lsrs	r3, r3, #2
 8002fca:	009a      	lsls	r2, r3, #2
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002fda:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	409a      	lsls	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002fea:	bf00      	nop
 8002fec:	371c      	adds	r7, #28
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40020407 	.word	0x40020407
 8002ffc:	40020800 	.word	0x40020800
 8003000:	40020820 	.word	0x40020820
 8003004:	cccccccd 	.word	0xcccccccd
 8003008:	40020880 	.word	0x40020880

0800300c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	4b0b      	ldr	r3, [pc, #44]	; (800304c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	461a      	mov	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a08      	ldr	r2, [pc, #32]	; (8003050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800302e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3b01      	subs	r3, #1
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2201      	movs	r2, #1
 800303a:	409a      	lsls	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003040:	bf00      	nop
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	1000823f 	.word	0x1000823f
 8003050:	40020940 	.word	0x40020940

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003062:	e15a      	b.n	800331a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2101      	movs	r1, #1
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	4013      	ands	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 814c 	beq.w	8003314 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	2b01      	cmp	r3, #1
 8003086:	d005      	beq.n	8003094 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003090:	2b02      	cmp	r3, #2
 8003092:	d130      	bne.n	80030f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ca:	2201      	movs	r2, #1
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	f003 0201 	and.w	r2, r3, #1
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d017      	beq.n	8003132 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	2203      	movs	r2, #3
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d123      	bne.n	8003186 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	08da      	lsrs	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3208      	adds	r2, #8
 8003146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	220f      	movs	r2, #15
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4013      	ands	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	08da      	lsrs	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3208      	adds	r2, #8
 8003180:	6939      	ldr	r1, [r7, #16]
 8003182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	2203      	movs	r2, #3
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0203 	and.w	r2, r3, #3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80a6 	beq.w	8003314 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031c8:	4b5b      	ldr	r3, [pc, #364]	; (8003338 <HAL_GPIO_Init+0x2e4>)
 80031ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031cc:	4a5a      	ldr	r2, [pc, #360]	; (8003338 <HAL_GPIO_Init+0x2e4>)
 80031ce:	f043 0301 	orr.w	r3, r3, #1
 80031d2:	6613      	str	r3, [r2, #96]	; 0x60
 80031d4:	4b58      	ldr	r3, [pc, #352]	; (8003338 <HAL_GPIO_Init+0x2e4>)
 80031d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	60bb      	str	r3, [r7, #8]
 80031de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031e0:	4a56      	ldr	r2, [pc, #344]	; (800333c <HAL_GPIO_Init+0x2e8>)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	089b      	lsrs	r3, r3, #2
 80031e6:	3302      	adds	r3, #2
 80031e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	4013      	ands	r3, r2
 8003202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800320a:	d01f      	beq.n	800324c <HAL_GPIO_Init+0x1f8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a4c      	ldr	r2, [pc, #304]	; (8003340 <HAL_GPIO_Init+0x2ec>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d019      	beq.n	8003248 <HAL_GPIO_Init+0x1f4>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a4b      	ldr	r2, [pc, #300]	; (8003344 <HAL_GPIO_Init+0x2f0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d013      	beq.n	8003244 <HAL_GPIO_Init+0x1f0>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a4a      	ldr	r2, [pc, #296]	; (8003348 <HAL_GPIO_Init+0x2f4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d00d      	beq.n	8003240 <HAL_GPIO_Init+0x1ec>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a49      	ldr	r2, [pc, #292]	; (800334c <HAL_GPIO_Init+0x2f8>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d007      	beq.n	800323c <HAL_GPIO_Init+0x1e8>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a48      	ldr	r2, [pc, #288]	; (8003350 <HAL_GPIO_Init+0x2fc>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d101      	bne.n	8003238 <HAL_GPIO_Init+0x1e4>
 8003234:	2305      	movs	r3, #5
 8003236:	e00a      	b.n	800324e <HAL_GPIO_Init+0x1fa>
 8003238:	2306      	movs	r3, #6
 800323a:	e008      	b.n	800324e <HAL_GPIO_Init+0x1fa>
 800323c:	2304      	movs	r3, #4
 800323e:	e006      	b.n	800324e <HAL_GPIO_Init+0x1fa>
 8003240:	2303      	movs	r3, #3
 8003242:	e004      	b.n	800324e <HAL_GPIO_Init+0x1fa>
 8003244:	2302      	movs	r3, #2
 8003246:	e002      	b.n	800324e <HAL_GPIO_Init+0x1fa>
 8003248:	2301      	movs	r3, #1
 800324a:	e000      	b.n	800324e <HAL_GPIO_Init+0x1fa>
 800324c:	2300      	movs	r3, #0
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	f002 0203 	and.w	r2, r2, #3
 8003254:	0092      	lsls	r2, r2, #2
 8003256:	4093      	lsls	r3, r2
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800325e:	4937      	ldr	r1, [pc, #220]	; (800333c <HAL_GPIO_Init+0x2e8>)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	089b      	lsrs	r3, r3, #2
 8003264:	3302      	adds	r3, #2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800326c:	4b39      	ldr	r3, [pc, #228]	; (8003354 <HAL_GPIO_Init+0x300>)
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	43db      	mvns	r3, r3
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	4013      	ands	r3, r2
 800327a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003290:	4a30      	ldr	r2, [pc, #192]	; (8003354 <HAL_GPIO_Init+0x300>)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003296:	4b2f      	ldr	r3, [pc, #188]	; (8003354 <HAL_GPIO_Init+0x300>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	43db      	mvns	r3, r3
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4013      	ands	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032ba:	4a26      	ldr	r2, [pc, #152]	; (8003354 <HAL_GPIO_Init+0x300>)
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_GPIO_Init+0x300>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_GPIO_Init+0x300>)
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032ea:	4b1a      	ldr	r3, [pc, #104]	; (8003354 <HAL_GPIO_Init+0x300>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	43db      	mvns	r3, r3
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4013      	ands	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800330e:	4a11      	ldr	r2, [pc, #68]	; (8003354 <HAL_GPIO_Init+0x300>)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3301      	adds	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	f47f ae9d 	bne.w	8003064 <HAL_GPIO_Init+0x10>
  }
}
 800332a:	bf00      	nop
 800332c:	bf00      	nop
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	40021000 	.word	0x40021000
 800333c:	40010000 	.word	0x40010000
 8003340:	48000400 	.word	0x48000400
 8003344:	48000800 	.word	0x48000800
 8003348:	48000c00 	.word	0x48000c00
 800334c:	48001000 	.word	0x48001000
 8003350:	48001400 	.word	0x48001400
 8003354:	40010400 	.word	0x40010400

08003358 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d141      	bne.n	80033ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003366:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800336e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003372:	d131      	bne.n	80033d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003374:	4b47      	ldr	r3, [pc, #284]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800337a:	4a46      	ldr	r2, [pc, #280]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003380:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003384:	4b43      	ldr	r3, [pc, #268]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800338c:	4a41      	ldr	r2, [pc, #260]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003392:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003394:	4b40      	ldr	r3, [pc, #256]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2232      	movs	r2, #50	; 0x32
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	4a3f      	ldr	r2, [pc, #252]	; (800349c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	0c9b      	lsrs	r3, r3, #18
 80033a6:	3301      	adds	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033aa:	e002      	b.n	80033b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b2:	4b38      	ldr	r3, [pc, #224]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033be:	d102      	bne.n	80033c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f2      	bne.n	80033ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033c6:	4b33      	ldr	r3, [pc, #204]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d2:	d158      	bne.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e057      	b.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033d8:	4b2e      	ldr	r3, [pc, #184]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033de:	4a2d      	ldr	r2, [pc, #180]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033e8:	e04d      	b.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f0:	d141      	bne.n	8003476 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033f2:	4b28      	ldr	r3, [pc, #160]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fe:	d131      	bne.n	8003464 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003400:	4b24      	ldr	r3, [pc, #144]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003406:	4a23      	ldr	r2, [pc, #140]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003408:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003410:	4b20      	ldr	r3, [pc, #128]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003418:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800341e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003420:	4b1d      	ldr	r3, [pc, #116]	; (8003498 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2232      	movs	r2, #50	; 0x32
 8003426:	fb02 f303 	mul.w	r3, r2, r3
 800342a:	4a1c      	ldr	r2, [pc, #112]	; (800349c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800342c:	fba2 2303 	umull	r2, r3, r2, r3
 8003430:	0c9b      	lsrs	r3, r3, #18
 8003432:	3301      	adds	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003436:	e002      	b.n	800343e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3b01      	subs	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800343e:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344a:	d102      	bne.n	8003452 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f2      	bne.n	8003438 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800345e:	d112      	bne.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e011      	b.n	8003488 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003474:	e007      	b.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800347e:	4a05      	ldr	r2, [pc, #20]	; (8003494 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003480:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003484:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	40007000 	.word	0x40007000
 8003498:	20000000 	.word	0x20000000
 800349c:	431bde83 	.word	0x431bde83

080034a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	4a04      	ldr	r2, [pc, #16]	; (80034bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034ae:	6093      	str	r3, [r2, #8]
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40007000 	.word	0x40007000

080034c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e2fe      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d075      	beq.n	80035ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034de:	4b97      	ldr	r3, [pc, #604]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034e8:	4b94      	ldr	r3, [pc, #592]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b0c      	cmp	r3, #12
 80034f6:	d102      	bne.n	80034fe <HAL_RCC_OscConfig+0x3e>
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d002      	beq.n	8003504 <HAL_RCC_OscConfig+0x44>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d10b      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	4b8d      	ldr	r3, [pc, #564]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05b      	beq.n	80035c8 <HAL_RCC_OscConfig+0x108>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d157      	bne.n	80035c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e2d9      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003524:	d106      	bne.n	8003534 <HAL_RCC_OscConfig+0x74>
 8003526:	4b85      	ldr	r3, [pc, #532]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a84      	ldr	r2, [pc, #528]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x98>
 800353e:	4b7f      	ldr	r3, [pc, #508]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a7e      	ldr	r2, [pc, #504]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b7c      	ldr	r3, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7b      	ldr	r2, [pc, #492]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003558:	4b78      	ldr	r3, [pc, #480]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a77      	ldr	r2, [pc, #476]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b75      	ldr	r3, [pc, #468]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a74      	ldr	r2, [pc, #464]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fd fd70 	bl	800105c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fd fd6c 	bl	800105c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e29e      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003592:	4b6a      	ldr	r3, [pc, #424]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0xc0>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fd fd5c 	bl	800105c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fd fd58 	bl	800105c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e28a      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ba:	4b60      	ldr	r3, [pc, #384]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0xe8>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d075      	beq.n	80036c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035d6:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035e0:	4b56      	ldr	r3, [pc, #344]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	d102      	bne.n	80035f6 <HAL_RCC_OscConfig+0x136>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d002      	beq.n	80035fc <HAL_RCC_OscConfig+0x13c>
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d11f      	bne.n	800363c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035fc:	4b4f      	ldr	r3, [pc, #316]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d005      	beq.n	8003614 <HAL_RCC_OscConfig+0x154>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e25d      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003614:	4b49      	ldr	r3, [pc, #292]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	061b      	lsls	r3, r3, #24
 8003622:	4946      	ldr	r1, [pc, #280]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003624:	4313      	orrs	r3, r2
 8003626:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003628:	4b45      	ldr	r3, [pc, #276]	; (8003740 <HAL_RCC_OscConfig+0x280>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fcc9 	bl	8000fc4 <HAL_InitTick>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d043      	beq.n	80036c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e249      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d023      	beq.n	800368c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003644:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a3c      	ldr	r2, [pc, #240]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 800364a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7fd fd04 	bl	800105c <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003658:	f7fd fd00 	bl	800105c <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e232      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800366a:	4b34      	ldr	r3, [pc, #208]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003676:	4b31      	ldr	r3, [pc, #196]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	061b      	lsls	r3, r3, #24
 8003684:	492d      	ldr	r1, [pc, #180]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003686:	4313      	orrs	r3, r2
 8003688:	604b      	str	r3, [r1, #4]
 800368a:	e01a      	b.n	80036c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368c:	4b2b      	ldr	r3, [pc, #172]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2a      	ldr	r2, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003692:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003698:	f7fd fce0 	bl	800105c <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a0:	f7fd fcdc 	bl	800105c <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e20e      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b2:	4b22      	ldr	r3, [pc, #136]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x1e0>
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0308 	and.w	r3, r3, #8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d041      	beq.n	8003752 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d01c      	beq.n	8003710 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d6:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 80036d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036dc:	4a17      	ldr	r2, [pc, #92]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fd fcb9 	bl	800105c <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ee:	f7fd fcb5 	bl	800105c <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e1e7      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0ef      	beq.n	80036ee <HAL_RCC_OscConfig+0x22e>
 800370e:	e020      	b.n	8003752 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003716:	4a09      	ldr	r2, [pc, #36]	; (800373c <HAL_RCC_OscConfig+0x27c>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fd fc9c 	bl	800105c <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003726:	e00d      	b.n	8003744 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003728:	f7fd fc98 	bl	800105c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d906      	bls.n	8003744 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e1ca      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003744:	4b8c      	ldr	r3, [pc, #560]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ea      	bne.n	8003728 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 80a6 	beq.w	80038ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003760:	2300      	movs	r3, #0
 8003762:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003764:	4b84      	ldr	r3, [pc, #528]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_RCC_OscConfig+0x2b4>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <HAL_RCC_OscConfig+0x2b6>
 8003774:	2300      	movs	r3, #0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	4b7f      	ldr	r3, [pc, #508]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	4a7e      	ldr	r2, [pc, #504]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003784:	6593      	str	r3, [r2, #88]	; 0x58
 8003786:	4b7c      	ldr	r3, [pc, #496]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378e:	60fb      	str	r3, [r7, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003792:	2301      	movs	r3, #1
 8003794:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003796:	4b79      	ldr	r3, [pc, #484]	; (800397c <HAL_RCC_OscConfig+0x4bc>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d118      	bne.n	80037d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCC_OscConfig+0x4bc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a75      	ldr	r2, [pc, #468]	; (800397c <HAL_RCC_OscConfig+0x4bc>)
 80037a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037ae:	f7fd fc55 	bl	800105c <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b6:	f7fd fc51 	bl	800105c <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e183      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c8:	4b6c      	ldr	r3, [pc, #432]	; (800397c <HAL_RCC_OscConfig+0x4bc>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d108      	bne.n	80037ee <HAL_RCC_OscConfig+0x32e>
 80037dc:	4b66      	ldr	r3, [pc, #408]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	4a65      	ldr	r2, [pc, #404]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 80037e4:	f043 0301 	orr.w	r3, r3, #1
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ec:	e024      	b.n	8003838 <HAL_RCC_OscConfig+0x378>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	d110      	bne.n	8003818 <HAL_RCC_OscConfig+0x358>
 80037f6:	4b60      	ldr	r3, [pc, #384]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 80037f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fc:	4a5e      	ldr	r2, [pc, #376]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 80037fe:	f043 0304 	orr.w	r3, r3, #4
 8003802:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003806:	4b5c      	ldr	r3, [pc, #368]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380c:	4a5a      	ldr	r2, [pc, #360]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003816:	e00f      	b.n	8003838 <HAL_RCC_OscConfig+0x378>
 8003818:	4b57      	ldr	r3, [pc, #348]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	4a56      	ldr	r2, [pc, #344]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003828:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 800382a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382e:	4a52      	ldr	r2, [pc, #328]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003830:	f023 0304 	bic.w	r3, r3, #4
 8003834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d016      	beq.n	800386e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003840:	f7fd fc0c 	bl	800105c <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003846:	e00a      	b.n	800385e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003848:	f7fd fc08 	bl	800105c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	f241 3288 	movw	r2, #5000	; 0x1388
 8003856:	4293      	cmp	r3, r2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e138      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385e:	4b46      	ldr	r3, [pc, #280]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0ed      	beq.n	8003848 <HAL_RCC_OscConfig+0x388>
 800386c:	e015      	b.n	800389a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fd fbf5 	bl	800105c <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003874:	e00a      	b.n	800388c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003876:	f7fd fbf1 	bl	800105c <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	; 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e121      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800388c:	4b3a      	ldr	r3, [pc, #232]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 800388e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1ed      	bne.n	8003876 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800389a:	7ffb      	ldrb	r3, [r7, #31]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d105      	bne.n	80038ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a0:	4b35      	ldr	r3, [pc, #212]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	4a34      	ldr	r2, [pc, #208]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 80038a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d03c      	beq.n	8003932 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d01c      	beq.n	80038fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038c0:	4b2d      	ldr	r3, [pc, #180]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 80038c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c6:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d0:	f7fd fbc4 	bl	800105c <HAL_GetTick>
 80038d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038d6:	e008      	b.n	80038ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038d8:	f7fd fbc0 	bl	800105c <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0f2      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ea:	4b23      	ldr	r3, [pc, #140]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 80038ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038f0:	f003 0302 	and.w	r3, r3, #2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0ef      	beq.n	80038d8 <HAL_RCC_OscConfig+0x418>
 80038f8:	e01b      	b.n	8003932 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80038fa:	4b1f      	ldr	r3, [pc, #124]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 80038fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003900:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003902:	f023 0301 	bic.w	r3, r3, #1
 8003906:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390a:	f7fd fba7 	bl	800105c <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003912:	f7fd fba3 	bl	800105c <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e0d5      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003924:	4b14      	ldr	r3, [pc, #80]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1ef      	bne.n	8003912 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80c9 	beq.w	8003ace <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393c:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b0c      	cmp	r3, #12
 8003946:	f000 8083 	beq.w	8003a50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d15e      	bne.n	8003a10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a08      	ldr	r2, [pc, #32]	; (8003978 <HAL_RCC_OscConfig+0x4b8>)
 8003958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fd fb7d 	bl	800105c <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003964:	e00c      	b.n	8003980 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003966:	f7fd fb79 	bl	800105c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d905      	bls.n	8003980 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e0ab      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
 8003978:	40021000 	.word	0x40021000
 800397c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003980:	4b55      	ldr	r3, [pc, #340]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ec      	bne.n	8003966 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800398c:	4b52      	ldr	r3, [pc, #328]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	4b52      	ldr	r3, [pc, #328]	; (8003adc <HAL_RCC_OscConfig+0x61c>)
 8003992:	4013      	ands	r3, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6a11      	ldr	r1, [r2, #32]
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800399c:	3a01      	subs	r2, #1
 800399e:	0112      	lsls	r2, r2, #4
 80039a0:	4311      	orrs	r1, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039a6:	0212      	lsls	r2, r2, #8
 80039a8:	4311      	orrs	r1, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039ae:	0852      	lsrs	r2, r2, #1
 80039b0:	3a01      	subs	r2, #1
 80039b2:	0552      	lsls	r2, r2, #21
 80039b4:	4311      	orrs	r1, r2
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039ba:	0852      	lsrs	r2, r2, #1
 80039bc:	3a01      	subs	r2, #1
 80039be:	0652      	lsls	r2, r2, #25
 80039c0:	4311      	orrs	r1, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039c6:	06d2      	lsls	r2, r2, #27
 80039c8:	430a      	orrs	r2, r1
 80039ca:	4943      	ldr	r1, [pc, #268]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d0:	4b41      	ldr	r3, [pc, #260]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a40      	ldr	r2, [pc, #256]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80039d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039da:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039dc:	4b3e      	ldr	r3, [pc, #248]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4a3d      	ldr	r2, [pc, #244]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 80039e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fb38 	bl	800105c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd fb34 	bl	800105c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e066      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a02:	4b35      	ldr	r3, [pc, #212]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x530>
 8003a0e:	e05e      	b.n	8003ace <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a10:	4b31      	ldr	r3, [pc, #196]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fb1e 	bl	800105c <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fd fb1a 	bl	800105c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e04c      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a36:	4b28      	ldr	r3, [pc, #160]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a42:	4b25      	ldr	r3, [pc, #148]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	4924      	ldr	r1, [pc, #144]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a48:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <HAL_RCC_OscConfig+0x620>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
 8003a4e:	e03e      	b.n	8003ace <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e039      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a5c:	4b1e      	ldr	r3, [pc, #120]	; (8003ad8 <HAL_RCC_OscConfig+0x618>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0203 	and.w	r2, r3, #3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d12c      	bne.n	8003aca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d123      	bne.n	8003aca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d11b      	bne.n	8003aca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d113      	bne.n	8003aca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d109      	bne.n	8003aca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3720      	adds	r7, #32
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	019f800c 	.word	0x019f800c
 8003ae0:	feeefffc 	.word	0xfeeefffc

08003ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e11e      	b.n	8003d3a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003afc:	4b91      	ldr	r3, [pc, #580]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 030f 	and.w	r3, r3, #15
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d910      	bls.n	8003b2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b8e      	ldr	r3, [pc, #568]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 020f 	bic.w	r2, r3, #15
 8003b12:	498c      	ldr	r1, [pc, #560]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b8a      	ldr	r3, [pc, #552]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e106      	b.n	8003d3a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d073      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d129      	bne.n	8003b94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b40:	4b81      	ldr	r3, [pc, #516]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e0f4      	b.n	8003d3a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b50:	f000 f99e 	bl	8003e90 <RCC_GetSysClockFreqFromPLLSource>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	4a7c      	ldr	r2, [pc, #496]	; (8003d4c <HAL_RCC_ClockConfig+0x268>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d93f      	bls.n	8003bde <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b5e:	4b7a      	ldr	r3, [pc, #488]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d009      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d033      	beq.n	8003bde <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d12f      	bne.n	8003bde <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b7e:	4b72      	ldr	r3, [pc, #456]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b86:	4a70      	ldr	r2, [pc, #448]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	617b      	str	r3, [r7, #20]
 8003b92:	e024      	b.n	8003bde <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d107      	bne.n	8003bac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b9c:	4b6a      	ldr	r3, [pc, #424]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d109      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0c6      	b.n	8003d3a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bac:	4b66      	ldr	r3, [pc, #408]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0be      	b.n	8003d3a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bbc:	f000 f8ce 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8003bc0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4a61      	ldr	r2, [pc, #388]	; (8003d4c <HAL_RCC_ClockConfig+0x268>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d909      	bls.n	8003bde <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bca:	4b5f      	ldr	r3, [pc, #380]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd2:	4a5d      	ldr	r2, [pc, #372]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bde:	4b5a      	ldr	r3, [pc, #360]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f023 0203 	bic.w	r2, r3, #3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4957      	ldr	r1, [pc, #348]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fa34 	bl	800105c <HAL_GetTick>
 8003bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf8:	f7fd fa30 	bl	800105c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e095      	b.n	8003d3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0e:	4b4e      	ldr	r3, [pc, #312]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f003 020c 	and.w	r2, r3, #12
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d1eb      	bne.n	8003bf8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d023      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c38:	4b43      	ldr	r3, [pc, #268]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	4a42      	ldr	r2, [pc, #264]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003c3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d007      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c50:	4b3d      	ldr	r3, [pc, #244]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c58:	4a3b      	ldr	r2, [pc, #236]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003c5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c60:	4b39      	ldr	r3, [pc, #228]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	4936      	ldr	r1, [pc, #216]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b80      	cmp	r3, #128	; 0x80
 8003c78:	d105      	bne.n	8003c86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003c7a:	4b33      	ldr	r3, [pc, #204]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	4a32      	ldr	r2, [pc, #200]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c86:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d21d      	bcs.n	8003cd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c94:	4b2b      	ldr	r3, [pc, #172]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f023 020f 	bic.w	r2, r3, #15
 8003c9c:	4929      	ldr	r1, [pc, #164]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ca4:	f7fd f9da 	bl	800105c <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cac:	f7fd f9d6 	bl	800105c <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e03b      	b.n	8003d3a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b20      	ldr	r3, [pc, #128]	; (8003d44 <HAL_RCC_ClockConfig+0x260>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d1ed      	bne.n	8003cac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	4917      	ldr	r1, [pc, #92]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d009      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cfa:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	490f      	ldr	r1, [pc, #60]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d0e:	f000 f825 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8003d12:	4602      	mov	r2, r0
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <HAL_RCC_ClockConfig+0x264>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	490c      	ldr	r1, [pc, #48]	; (8003d50 <HAL_RCC_ClockConfig+0x26c>)
 8003d20:	5ccb      	ldrb	r3, [r1, r3]
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	fa22 f303 	lsr.w	r3, r2, r3
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	; (8003d54 <HAL_RCC_ClockConfig+0x270>)
 8003d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d2e:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <HAL_RCC_ClockConfig+0x274>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fd f946 	bl	8000fc4 <HAL_InitTick>
 8003d38:	4603      	mov	r3, r0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40022000 	.word	0x40022000
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	04c4b400 	.word	0x04c4b400
 8003d50:	08006c24 	.word	0x08006c24
 8003d54:	20000000 	.word	0x20000000
 8003d58:	20000004 	.word	0x20000004

08003d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d62:	4b2c      	ldr	r3, [pc, #176]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d102      	bne.n	8003d74 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d6e:	4b2a      	ldr	r3, [pc, #168]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d70:	613b      	str	r3, [r7, #16]
 8003d72:	e047      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003d74:	4b27      	ldr	r3, [pc, #156]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d102      	bne.n	8003d86 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d80:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	e03e      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003d86:	4b23      	ldr	r3, [pc, #140]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 030c 	and.w	r3, r3, #12
 8003d8e:	2b0c      	cmp	r3, #12
 8003d90:	d136      	bne.n	8003e00 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d92:	4b20      	ldr	r3, [pc, #128]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	3301      	adds	r3, #1
 8003da8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d10c      	bne.n	8003dca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003db0:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dba:	68d2      	ldr	r2, [r2, #12]
 8003dbc:	0a12      	lsrs	r2, r2, #8
 8003dbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	617b      	str	r3, [r7, #20]
      break;
 8003dc8:	e00c      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dca:	4a13      	ldr	r2, [pc, #76]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	4a10      	ldr	r2, [pc, #64]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd4:	68d2      	ldr	r2, [r2, #12]
 8003dd6:	0a12      	lsrs	r2, r2, #8
 8003dd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
      break;
 8003de2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	0e5b      	lsrs	r3, r3, #25
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	3301      	adds	r3, #1
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	613b      	str	r3, [r7, #16]
 8003dfe:	e001      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e04:	693b      	ldr	r3, [r7, #16]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	00f42400 	.word	0x00f42400
 8003e1c:	016e3600 	.word	0x016e3600

08003e20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e24:	4b03      	ldr	r3, [pc, #12]	; (8003e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e26:	681b      	ldr	r3, [r3, #0]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	20000000 	.word	0x20000000

08003e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e3c:	f7ff fff0 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003e40:	4602      	mov	r2, r0
 8003e42:	4b06      	ldr	r3, [pc, #24]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	4904      	ldr	r1, [pc, #16]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e4e:	5ccb      	ldrb	r3, [r1, r3]
 8003e50:	f003 031f 	and.w	r3, r3, #31
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08006c34 	.word	0x08006c34

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e68:	f7ff ffda 	bl	8003e20 <HAL_RCC_GetHCLKFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	0adb      	lsrs	r3, r3, #11
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4904      	ldr	r1, [pc, #16]	; (8003e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40021000 	.word	0x40021000
 8003e8c:	08006c34 	.word	0x08006c34

08003e90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e96:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	3301      	adds	r3, #1
 8003eac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d10c      	bne.n	8003ece <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eb4:	4a17      	ldr	r2, [pc, #92]	; (8003f14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ebe:	68d2      	ldr	r2, [r2, #12]
 8003ec0:	0a12      	lsrs	r2, r2, #8
 8003ec2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	617b      	str	r3, [r7, #20]
    break;
 8003ecc:	e00c      	b.n	8003ee8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed6:	4a0e      	ldr	r2, [pc, #56]	; (8003f10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ed8:	68d2      	ldr	r2, [r2, #12]
 8003eda:	0a12      	lsrs	r2, r2, #8
 8003edc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ee0:	fb02 f303 	mul.w	r3, r2, r3
 8003ee4:	617b      	str	r3, [r7, #20]
    break;
 8003ee6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	0e5b      	lsrs	r3, r3, #25
 8003eee:	f003 0303 	and.w	r3, r3, #3
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f02:	687b      	ldr	r3, [r7, #4]
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	371c      	adds	r7, #28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	40021000 	.word	0x40021000
 8003f14:	016e3600 	.word	0x016e3600
 8003f18:	00f42400 	.word	0x00f42400

08003f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f24:	2300      	movs	r3, #0
 8003f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f28:	2300      	movs	r3, #0
 8003f2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8098 	beq.w	800406a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3e:	4b43      	ldr	r3, [pc, #268]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10d      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4a:	4b40      	ldr	r3, [pc, #256]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4e:	4a3f      	ldr	r2, [pc, #252]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f54:	6593      	str	r3, [r2, #88]	; 0x58
 8003f56:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	60bb      	str	r3, [r7, #8]
 8003f60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f62:	2301      	movs	r3, #1
 8003f64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f66:	4b3a      	ldr	r3, [pc, #232]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a39      	ldr	r2, [pc, #228]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f72:	f7fd f873 	bl	800105c <HAL_GetTick>
 8003f76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f78:	e009      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7a:	f7fd f86f 	bl	800105c <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d902      	bls.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f8c:	e005      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f8e:	4b30      	ldr	r3, [pc, #192]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0ef      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f9a:	7cfb      	ldrb	r3, [r7, #19]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d159      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fa0:	4b2a      	ldr	r3, [pc, #168]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003faa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01e      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d019      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fbc:	4b23      	ldr	r3, [pc, #140]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fc8:	4b20      	ldr	r3, [pc, #128]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	4a1f      	ldr	r2, [pc, #124]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fd8:	4b1c      	ldr	r3, [pc, #112]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fe8:	4a18      	ldr	r2, [pc, #96]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d016      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffa:	f7fd f82f 	bl	800105c <HAL_GetTick>
 8003ffe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004000:	e00b      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fd f82b 	bl	800105c <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d902      	bls.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	74fb      	strb	r3, [r7, #19]
            break;
 8004018:	e006      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401a:	4b0c      	ldr	r3, [pc, #48]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0ec      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403c:	4903      	ldr	r1, [pc, #12]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004044:	e008      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	74bb      	strb	r3, [r7, #18]
 800404a:	e005      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800404c:	40021000 	.word	0x40021000
 8004050:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	7cfb      	ldrb	r3, [r7, #19]
 8004056:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004058:	7c7b      	ldrb	r3, [r7, #17]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d105      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405e:	4ba7      	ldr	r3, [pc, #668]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	4aa6      	ldr	r2, [pc, #664]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004068:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004076:	4ba1      	ldr	r3, [pc, #644]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f023 0203 	bic.w	r2, r3, #3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	499d      	ldr	r1, [pc, #628]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004098:	4b98      	ldr	r3, [pc, #608]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	f023 020c 	bic.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	4995      	ldr	r1, [pc, #596]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040ba:	4b90      	ldr	r3, [pc, #576]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	498c      	ldr	r1, [pc, #560]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040dc:	4b87      	ldr	r3, [pc, #540]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	4984      	ldr	r1, [pc, #528]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0310 	and.w	r3, r3, #16
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040fe:	4b7f      	ldr	r3, [pc, #508]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	497b      	ldr	r1, [pc, #492]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004120:	4b76      	ldr	r3, [pc, #472]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	4973      	ldr	r1, [pc, #460]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004142:	4b6e      	ldr	r3, [pc, #440]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	496a      	ldr	r1, [pc, #424]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004164:	4b65      	ldr	r3, [pc, #404]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	4962      	ldr	r1, [pc, #392]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004186:	4b5d      	ldr	r3, [pc, #372]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	4959      	ldr	r1, [pc, #356]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041a8:	4b54      	ldr	r3, [pc, #336]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	4951      	ldr	r1, [pc, #324]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ca:	4b4c      	ldr	r3, [pc, #304]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d8:	4948      	ldr	r1, [pc, #288]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d015      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041ec:	4b43      	ldr	r3, [pc, #268]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	4940      	ldr	r1, [pc, #256]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800420a:	d105      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800420c:	4b3b      	ldr	r3, [pc, #236]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	4a3a      	ldr	r2, [pc, #232]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004216:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004220:	2b00      	cmp	r3, #0
 8004222:	d015      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004224:	4b35      	ldr	r3, [pc, #212]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004232:	4932      	ldr	r1, [pc, #200]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800423e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004242:	d105      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004244:	4b2d      	ldr	r3, [pc, #180]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a2c      	ldr	r2, [pc, #176]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800424e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d015      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800425c:	4b27      	ldr	r3, [pc, #156]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004262:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426a:	4924      	ldr	r1, [pc, #144]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426c:	4313      	orrs	r3, r2
 800426e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004276:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800427a:	d105      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800427c:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4a1e      	ldr	r2, [pc, #120]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004286:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d015      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004294:	4b19      	ldr	r3, [pc, #100]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	4916      	ldr	r1, [pc, #88]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042b2:	d105      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4a10      	ldr	r2, [pc, #64]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d019      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	4908      	ldr	r1, [pc, #32]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ea:	d109      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	4a02      	ldr	r2, [pc, #8]	; (80042fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f6:	60d3      	str	r3, [r2, #12]
 80042f8:	e002      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80042fa:	bf00      	nop
 80042fc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d015      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800430c:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800430e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004312:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	4926      	ldr	r1, [pc, #152]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800432a:	d105      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800432c:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a20      	ldr	r2, [pc, #128]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004336:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d015      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004344:	4b1b      	ldr	r3, [pc, #108]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004352:	4918      	ldr	r1, [pc, #96]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004362:	d105      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004364:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800436e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d015      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800437c:	4b0d      	ldr	r3, [pc, #52]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800437e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004382:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	490a      	ldr	r1, [pc, #40]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800438c:	4313      	orrs	r3, r2
 800438e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800439a:	d105      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a04      	ldr	r2, [pc, #16]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80043a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000

080043b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e049      	b.n	800445e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f7fc fc82 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2202      	movs	r2, #2
 80043e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4610      	mov	r0, r2
 80043f8:	f000 fed0 	bl	800519c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d001      	beq.n	8004480 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e04c      	b.n	800451a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a26      	ldr	r2, [pc, #152]	; (8004528 <HAL_TIM_Base_Start+0xc0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d022      	beq.n	80044d8 <HAL_TIM_Base_Start+0x70>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449a:	d01d      	beq.n	80044d8 <HAL_TIM_Base_Start+0x70>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a22      	ldr	r2, [pc, #136]	; (800452c <HAL_TIM_Base_Start+0xc4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d018      	beq.n	80044d8 <HAL_TIM_Base_Start+0x70>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a21      	ldr	r2, [pc, #132]	; (8004530 <HAL_TIM_Base_Start+0xc8>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <HAL_TIM_Base_Start+0x70>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <HAL_TIM_Base_Start+0xcc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00e      	beq.n	80044d8 <HAL_TIM_Base_Start+0x70>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a1e      	ldr	r2, [pc, #120]	; (8004538 <HAL_TIM_Base_Start+0xd0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d009      	beq.n	80044d8 <HAL_TIM_Base_Start+0x70>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1c      	ldr	r2, [pc, #112]	; (800453c <HAL_TIM_Base_Start+0xd4>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_TIM_Base_Start+0x70>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1b      	ldr	r2, [pc, #108]	; (8004540 <HAL_TIM_Base_Start+0xd8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d115      	bne.n	8004504 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	4b19      	ldr	r3, [pc, #100]	; (8004544 <HAL_TIM_Base_Start+0xdc>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2b06      	cmp	r3, #6
 80044e8:	d015      	beq.n	8004516 <HAL_TIM_Base_Start+0xae>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f0:	d011      	beq.n	8004516 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f042 0201 	orr.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	e008      	b.n	8004516 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e000      	b.n	8004518 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004516:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40012c00 	.word	0x40012c00
 800452c:	40000400 	.word	0x40000400
 8004530:	40000800 	.word	0x40000800
 8004534:	40000c00 	.word	0x40000c00
 8004538:	40013400 	.word	0x40013400
 800453c:	40014000 	.word	0x40014000
 8004540:	40015000 	.word	0x40015000
 8004544:	00010007 	.word	0x00010007

08004548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b01      	cmp	r3, #1
 800455a:	d001      	beq.n	8004560 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e054      	b.n	800460a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68da      	ldr	r2, [r3, #12]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a26      	ldr	r2, [pc, #152]	; (8004618 <HAL_TIM_Base_Start_IT+0xd0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d022      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458a:	d01d      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a22      	ldr	r2, [pc, #136]	; (800461c <HAL_TIM_Base_Start_IT+0xd4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d018      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a21      	ldr	r2, [pc, #132]	; (8004620 <HAL_TIM_Base_Start_IT+0xd8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a1f      	ldr	r2, [pc, #124]	; (8004624 <HAL_TIM_Base_Start_IT+0xdc>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00e      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a1e      	ldr	r2, [pc, #120]	; (8004628 <HAL_TIM_Base_Start_IT+0xe0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d009      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1c      	ldr	r2, [pc, #112]	; (800462c <HAL_TIM_Base_Start_IT+0xe4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d004      	beq.n	80045c8 <HAL_TIM_Base_Start_IT+0x80>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1b      	ldr	r2, [pc, #108]	; (8004630 <HAL_TIM_Base_Start_IT+0xe8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d115      	bne.n	80045f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	4b19      	ldr	r3, [pc, #100]	; (8004634 <HAL_TIM_Base_Start_IT+0xec>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d015      	beq.n	8004606 <HAL_TIM_Base_Start_IT+0xbe>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045e0:	d011      	beq.n	8004606 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0201 	orr.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f2:	e008      	b.n	8004606 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0201 	orr.w	r2, r2, #1
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	e000      	b.n	8004608 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004606:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40012c00 	.word	0x40012c00
 800461c:	40000400 	.word	0x40000400
 8004620:	40000800 	.word	0x40000800
 8004624:	40000c00 	.word	0x40000c00
 8004628:	40013400 	.word	0x40013400
 800462c:	40014000 	.word	0x40014000
 8004630:	40015000 	.word	0x40015000
 8004634:	00010007 	.word	0x00010007

08004638 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d101      	bne.n	800464a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e049      	b.n	80046de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d106      	bne.n	8004664 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f841 	bl	80046e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3304      	adds	r3, #4
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f000 fd90 	bl	800519c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <HAL_TIM_PWM_Start+0x24>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	bf14      	ite	ne
 8004718:	2301      	movne	r3, #1
 800471a:	2300      	moveq	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	e03c      	b.n	800479a <HAL_TIM_PWM_Start+0x9e>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	2b04      	cmp	r3, #4
 8004724:	d109      	bne.n	800473a <HAL_TIM_PWM_Start+0x3e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b01      	cmp	r3, #1
 8004730:	bf14      	ite	ne
 8004732:	2301      	movne	r3, #1
 8004734:	2300      	moveq	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	e02f      	b.n	800479a <HAL_TIM_PWM_Start+0x9e>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	2b08      	cmp	r3, #8
 800473e:	d109      	bne.n	8004754 <HAL_TIM_PWM_Start+0x58>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	bf14      	ite	ne
 800474c:	2301      	movne	r3, #1
 800474e:	2300      	moveq	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	e022      	b.n	800479a <HAL_TIM_PWM_Start+0x9e>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b0c      	cmp	r3, #12
 8004758:	d109      	bne.n	800476e <HAL_TIM_PWM_Start+0x72>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b01      	cmp	r3, #1
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	e015      	b.n	800479a <HAL_TIM_PWM_Start+0x9e>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b10      	cmp	r3, #16
 8004772:	d109      	bne.n	8004788 <HAL_TIM_PWM_Start+0x8c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b01      	cmp	r3, #1
 800477e:	bf14      	ite	ne
 8004780:	2301      	movne	r3, #1
 8004782:	2300      	moveq	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	e008      	b.n	800479a <HAL_TIM_PWM_Start+0x9e>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	bf14      	ite	ne
 8004794:	2301      	movne	r3, #1
 8004796:	2300      	moveq	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e0a6      	b.n	80048f0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0xb6>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b0:	e023      	b.n	80047fa <HAL_TIM_PWM_Start+0xfe>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_PWM_Start+0xc6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047c0:	e01b      	b.n	80047fa <HAL_TIM_PWM_Start+0xfe>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d104      	bne.n	80047d2 <HAL_TIM_PWM_Start+0xd6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2202      	movs	r2, #2
 80047cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d0:	e013      	b.n	80047fa <HAL_TIM_PWM_Start+0xfe>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b0c      	cmp	r3, #12
 80047d6:	d104      	bne.n	80047e2 <HAL_TIM_PWM_Start+0xe6>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047e0:	e00b      	b.n	80047fa <HAL_TIM_PWM_Start+0xfe>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b10      	cmp	r3, #16
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_PWM_Start+0xf6>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f0:	e003      	b.n	80047fa <HAL_TIM_PWM_Start+0xfe>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2201      	movs	r2, #1
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f001 f944 	bl	8005a90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a3a      	ldr	r2, [pc, #232]	; (80048f8 <HAL_TIM_PWM_Start+0x1fc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d018      	beq.n	8004844 <HAL_TIM_PWM_Start+0x148>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a39      	ldr	r2, [pc, #228]	; (80048fc <HAL_TIM_PWM_Start+0x200>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d013      	beq.n	8004844 <HAL_TIM_PWM_Start+0x148>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a37      	ldr	r2, [pc, #220]	; (8004900 <HAL_TIM_PWM_Start+0x204>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00e      	beq.n	8004844 <HAL_TIM_PWM_Start+0x148>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a36      	ldr	r2, [pc, #216]	; (8004904 <HAL_TIM_PWM_Start+0x208>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d009      	beq.n	8004844 <HAL_TIM_PWM_Start+0x148>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a34      	ldr	r2, [pc, #208]	; (8004908 <HAL_TIM_PWM_Start+0x20c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d004      	beq.n	8004844 <HAL_TIM_PWM_Start+0x148>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a33      	ldr	r2, [pc, #204]	; (800490c <HAL_TIM_PWM_Start+0x210>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d101      	bne.n	8004848 <HAL_TIM_PWM_Start+0x14c>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <HAL_TIM_PWM_Start+0x14e>
 8004848:	2300      	movs	r3, #0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800485c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <HAL_TIM_PWM_Start+0x1fc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d022      	beq.n	80048ae <HAL_TIM_PWM_Start+0x1b2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004870:	d01d      	beq.n	80048ae <HAL_TIM_PWM_Start+0x1b2>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a26      	ldr	r2, [pc, #152]	; (8004910 <HAL_TIM_PWM_Start+0x214>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d018      	beq.n	80048ae <HAL_TIM_PWM_Start+0x1b2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a24      	ldr	r2, [pc, #144]	; (8004914 <HAL_TIM_PWM_Start+0x218>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d013      	beq.n	80048ae <HAL_TIM_PWM_Start+0x1b2>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a23      	ldr	r2, [pc, #140]	; (8004918 <HAL_TIM_PWM_Start+0x21c>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d00e      	beq.n	80048ae <HAL_TIM_PWM_Start+0x1b2>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a19      	ldr	r2, [pc, #100]	; (80048fc <HAL_TIM_PWM_Start+0x200>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d009      	beq.n	80048ae <HAL_TIM_PWM_Start+0x1b2>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a18      	ldr	r2, [pc, #96]	; (8004900 <HAL_TIM_PWM_Start+0x204>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d004      	beq.n	80048ae <HAL_TIM_PWM_Start+0x1b2>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a18      	ldr	r2, [pc, #96]	; (800490c <HAL_TIM_PWM_Start+0x210>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d115      	bne.n	80048da <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <HAL_TIM_PWM_Start+0x220>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b06      	cmp	r3, #6
 80048be:	d015      	beq.n	80048ec <HAL_TIM_PWM_Start+0x1f0>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c6:	d011      	beq.n	80048ec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d8:	e008      	b.n	80048ec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0201 	orr.w	r2, r2, #1
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e000      	b.n	80048ee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40013400 	.word	0x40013400
 8004900:	40014000 	.word	0x40014000
 8004904:	40014400 	.word	0x40014400
 8004908:	40014800 	.word	0x40014800
 800490c:	40015000 	.word	0x40015000
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	00010007 	.word	0x00010007

08004920 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2200      	movs	r2, #0
 8004930:	6839      	ldr	r1, [r7, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f001 f8ac 	bl	8005a90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a40      	ldr	r2, [pc, #256]	; (8004a40 <HAL_TIM_PWM_Stop+0x120>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d018      	beq.n	8004974 <HAL_TIM_PWM_Stop+0x54>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a3f      	ldr	r2, [pc, #252]	; (8004a44 <HAL_TIM_PWM_Stop+0x124>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <HAL_TIM_PWM_Stop+0x54>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a3d      	ldr	r2, [pc, #244]	; (8004a48 <HAL_TIM_PWM_Stop+0x128>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00e      	beq.n	8004974 <HAL_TIM_PWM_Stop+0x54>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a3c      	ldr	r2, [pc, #240]	; (8004a4c <HAL_TIM_PWM_Stop+0x12c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_TIM_PWM_Stop+0x54>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a3a      	ldr	r2, [pc, #232]	; (8004a50 <HAL_TIM_PWM_Stop+0x130>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_TIM_PWM_Stop+0x54>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a39      	ldr	r2, [pc, #228]	; (8004a54 <HAL_TIM_PWM_Stop+0x134>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d101      	bne.n	8004978 <HAL_TIM_PWM_Stop+0x58>
 8004974:	2301      	movs	r3, #1
 8004976:	e000      	b.n	800497a <HAL_TIM_PWM_Stop+0x5a>
 8004978:	2300      	movs	r3, #0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d017      	beq.n	80049ae <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	f241 1311 	movw	r3, #4369	; 0x1111
 8004988:	4013      	ands	r3, r2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <HAL_TIM_PWM_Stop+0x8e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6a1a      	ldr	r2, [r3, #32]
 8004994:	f244 4344 	movw	r3, #17476	; 0x4444
 8004998:	4013      	ands	r3, r2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <HAL_TIM_PWM_Stop+0x8e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a1a      	ldr	r2, [r3, #32]
 80049b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10f      	bne.n	80049de <HAL_TIM_PWM_Stop+0xbe>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6a1a      	ldr	r2, [r3, #32]
 80049c4:	f244 4344 	movw	r3, #17476	; 0x4444
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d107      	bne.n	80049de <HAL_TIM_PWM_Stop+0xbe>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0201 	bic.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_PWM_Stop+0xce>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049ec:	e023      	b.n	8004a36 <HAL_TIM_PWM_Stop+0x116>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Stop+0xde>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049fc:	e01b      	b.n	8004a36 <HAL_TIM_PWM_Stop+0x116>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Stop+0xee>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0c:	e013      	b.n	8004a36 <HAL_TIM_PWM_Stop+0x116>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b0c      	cmp	r3, #12
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_PWM_Stop+0xfe>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a1c:	e00b      	b.n	8004a36 <HAL_TIM_PWM_Stop+0x116>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d104      	bne.n	8004a2e <HAL_TIM_PWM_Stop+0x10e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a2c:	e003      	b.n	8004a36 <HAL_TIM_PWM_Stop+0x116>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40013400 	.word	0x40013400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	40014400 	.word	0x40014400
 8004a50:	40014800 	.word	0x40014800
 8004a54:	40015000 	.word	0x40015000

08004a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d020      	beq.n	8004abc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d01b      	beq.n	8004abc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f06f 0202 	mvn.w	r2, #2
 8004a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fb5c 	bl	8005160 <HAL_TIM_IC_CaptureCallback>
 8004aa8:	e005      	b.n	8004ab6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fb4e 	bl	800514c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fb5f 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d020      	beq.n	8004b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d01b      	beq.n	8004b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f06f 0204 	mvn.w	r2, #4
 8004ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fb36 	bl	8005160 <HAL_TIM_IC_CaptureCallback>
 8004af4:	e005      	b.n	8004b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fb28 	bl	800514c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f000 fb39 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d020      	beq.n	8004b54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01b      	beq.n	8004b54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0208 	mvn.w	r2, #8
 8004b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2204      	movs	r2, #4
 8004b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d003      	beq.n	8004b42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fb10 	bl	8005160 <HAL_TIM_IC_CaptureCallback>
 8004b40:	e005      	b.n	8004b4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fb02 	bl	800514c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fb13 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f003 0310 	and.w	r3, r3, #16
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d020      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01b      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0210 	mvn.w	r2, #16
 8004b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2208      	movs	r2, #8
 8004b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d003      	beq.n	8004b8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 faea 	bl	8005160 <HAL_TIM_IC_CaptureCallback>
 8004b8c:	e005      	b.n	8004b9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fadc 	bl	800514c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 faed 	bl	8005174 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00c      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d007      	beq.n	8004bc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f06f 0201 	mvn.w	r2, #1
 8004bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7fb ffac 	bl	8000b1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d104      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f001 f8a9 	bl	8005d44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00c      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f001 f8a1 	bl	8005d58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00c      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 faa7 	bl	8005188 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00c      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d007      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f06f 0220 	mvn.w	r2, #32
 8004c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f001 f869 	bl	8005d30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00c      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f001 f875 	bl	8005d6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00c      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d007      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 f86d 	bl	8005d80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00c      	beq.n	8004cca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f001 f865 	bl	8005d94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00c      	beq.n	8004cee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f001 f85d 	bl	8005da8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b086      	sub	sp, #24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e0ff      	b.n	8004f16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2b14      	cmp	r3, #20
 8004d22:	f200 80f0 	bhi.w	8004f06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d81 	.word	0x08004d81
 8004d30:	08004f07 	.word	0x08004f07
 8004d34:	08004f07 	.word	0x08004f07
 8004d38:	08004f07 	.word	0x08004f07
 8004d3c:	08004dc1 	.word	0x08004dc1
 8004d40:	08004f07 	.word	0x08004f07
 8004d44:	08004f07 	.word	0x08004f07
 8004d48:	08004f07 	.word	0x08004f07
 8004d4c:	08004e03 	.word	0x08004e03
 8004d50:	08004f07 	.word	0x08004f07
 8004d54:	08004f07 	.word	0x08004f07
 8004d58:	08004f07 	.word	0x08004f07
 8004d5c:	08004e43 	.word	0x08004e43
 8004d60:	08004f07 	.word	0x08004f07
 8004d64:	08004f07 	.word	0x08004f07
 8004d68:	08004f07 	.word	0x08004f07
 8004d6c:	08004e85 	.word	0x08004e85
 8004d70:	08004f07 	.word	0x08004f07
 8004d74:	08004f07 	.word	0x08004f07
 8004d78:	08004f07 	.word	0x08004f07
 8004d7c:	08004ec5 	.word	0x08004ec5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68b9      	ldr	r1, [r7, #8]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fabc 	bl	8005304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0208 	orr.w	r2, r2, #8
 8004d9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0204 	bic.w	r2, r2, #4
 8004daa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6999      	ldr	r1, [r3, #24]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	691a      	ldr	r2, [r3, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	619a      	str	r2, [r3, #24]
      break;
 8004dbe:	e0a5      	b.n	8004f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fb36 	bl	8005438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6999      	ldr	r1, [r3, #24]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	021a      	lsls	r2, r3, #8
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	619a      	str	r2, [r3, #24]
      break;
 8004e00:	e084      	b.n	8004f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68b9      	ldr	r1, [r7, #8]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f000 fba9 	bl	8005560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69da      	ldr	r2, [r3, #28]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0208 	orr.w	r2, r2, #8
 8004e1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0204 	bic.w	r2, r2, #4
 8004e2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69d9      	ldr	r1, [r3, #28]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	691a      	ldr	r2, [r3, #16]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	61da      	str	r2, [r3, #28]
      break;
 8004e40:	e064      	b.n	8004f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fc1b 	bl	8005684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69d9      	ldr	r1, [r3, #28]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	021a      	lsls	r2, r3, #8
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	61da      	str	r2, [r3, #28]
      break;
 8004e82:	e043      	b.n	8004f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fc8e 	bl	80057ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0208 	orr.w	r2, r2, #8
 8004e9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0204 	bic.w	r2, r2, #4
 8004eae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004ec2:	e023      	b.n	8004f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68b9      	ldr	r1, [r7, #8]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fcd8 	bl	8005880 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ede:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	021a      	lsls	r2, r3, #8
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004f04:	e002      	b.n	8004f0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	75fb      	strb	r3, [r7, #23]
      break;
 8004f0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop

08004f20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <HAL_TIM_ConfigClockSource+0x1c>
 8004f38:	2302      	movs	r3, #2
 8004f3a:	e0f6      	b.n	800512a <HAL_TIM_ConfigClockSource+0x20a>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004f5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a6f      	ldr	r2, [pc, #444]	; (8005134 <HAL_TIM_ConfigClockSource+0x214>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	f000 80c1 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 8004f7c:	4a6d      	ldr	r2, [pc, #436]	; (8005134 <HAL_TIM_ConfigClockSource+0x214>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	f200 80c6 	bhi.w	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f84:	4a6c      	ldr	r2, [pc, #432]	; (8005138 <HAL_TIM_ConfigClockSource+0x218>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	f000 80b9 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 8004f8c:	4a6a      	ldr	r2, [pc, #424]	; (8005138 <HAL_TIM_ConfigClockSource+0x218>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	f200 80be 	bhi.w	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f94:	4a69      	ldr	r2, [pc, #420]	; (800513c <HAL_TIM_ConfigClockSource+0x21c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	f000 80b1 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 8004f9c:	4a67      	ldr	r2, [pc, #412]	; (800513c <HAL_TIM_ConfigClockSource+0x21c>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f200 80b6 	bhi.w	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fa4:	4a66      	ldr	r2, [pc, #408]	; (8005140 <HAL_TIM_ConfigClockSource+0x220>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	f000 80a9 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 8004fac:	4a64      	ldr	r2, [pc, #400]	; (8005140 <HAL_TIM_ConfigClockSource+0x220>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	f200 80ae 	bhi.w	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fb4:	4a63      	ldr	r2, [pc, #396]	; (8005144 <HAL_TIM_ConfigClockSource+0x224>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	f000 80a1 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 8004fbc:	4a61      	ldr	r2, [pc, #388]	; (8005144 <HAL_TIM_ConfigClockSource+0x224>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	f200 80a6 	bhi.w	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fc4:	4a60      	ldr	r2, [pc, #384]	; (8005148 <HAL_TIM_ConfigClockSource+0x228>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	f000 8099 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 8004fcc:	4a5e      	ldr	r2, [pc, #376]	; (8005148 <HAL_TIM_ConfigClockSource+0x228>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	f200 809e 	bhi.w	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fd4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004fd8:	f000 8091 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 8004fdc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004fe0:	f200 8096 	bhi.w	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe8:	f000 8089 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 8004fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff0:	f200 808e 	bhi.w	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff8:	d03e      	beq.n	8005078 <HAL_TIM_ConfigClockSource+0x158>
 8004ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffe:	f200 8087 	bhi.w	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	f000 8086 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1f6>
 800500a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800500e:	d87f      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8005010:	2b70      	cmp	r3, #112	; 0x70
 8005012:	d01a      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x12a>
 8005014:	2b70      	cmp	r3, #112	; 0x70
 8005016:	d87b      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8005018:	2b60      	cmp	r3, #96	; 0x60
 800501a:	d050      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x19e>
 800501c:	2b60      	cmp	r3, #96	; 0x60
 800501e:	d877      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8005020:	2b50      	cmp	r3, #80	; 0x50
 8005022:	d03c      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x17e>
 8005024:	2b50      	cmp	r3, #80	; 0x50
 8005026:	d873      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8005028:	2b40      	cmp	r3, #64	; 0x40
 800502a:	d058      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x1be>
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d86f      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8005030:	2b30      	cmp	r3, #48	; 0x30
 8005032:	d064      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 8005034:	2b30      	cmp	r3, #48	; 0x30
 8005036:	d86b      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8005038:	2b20      	cmp	r3, #32
 800503a:	d060      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 800503c:	2b20      	cmp	r3, #32
 800503e:	d867      	bhi.n	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d05c      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 8005044:	2b10      	cmp	r3, #16
 8005046:	d05a      	beq.n	80050fe <HAL_TIM_ConfigClockSource+0x1de>
 8005048:	e062      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6899      	ldr	r1, [r3, #8]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f000 fcf9 	bl	8005a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800506c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	609a      	str	r2, [r3, #8]
      break;
 8005076:	e04f      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	6899      	ldr	r1, [r3, #8]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f000 fce2 	bl	8005a50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800509a:	609a      	str	r2, [r3, #8]
      break;
 800509c:	e03c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 fc54 	bl	8005958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2150      	movs	r1, #80	; 0x50
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fcad 	bl	8005a16 <TIM_ITRx_SetConfig>
      break;
 80050bc:	e02c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 fc73 	bl	80059b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2160      	movs	r1, #96	; 0x60
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fc9d 	bl	8005a16 <TIM_ITRx_SetConfig>
      break;
 80050dc:	e01c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6859      	ldr	r1, [r3, #4]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f000 fc34 	bl	8005958 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2140      	movs	r1, #64	; 0x40
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fc8d 	bl	8005a16 <TIM_ITRx_SetConfig>
      break;
 80050fc:	e00c      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4619      	mov	r1, r3
 8005108:	4610      	mov	r0, r2
 800510a:	f000 fc84 	bl	8005a16 <TIM_ITRx_SetConfig>
      break;
 800510e:	e003      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
      break;
 8005114:	e000      	b.n	8005118 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005116:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005128:	7bfb      	ldrb	r3, [r7, #15]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	00100070 	.word	0x00100070
 8005138:	00100060 	.word	0x00100060
 800513c:	00100050 	.word	0x00100050
 8005140:	00100040 	.word	0x00100040
 8005144:	00100030 	.word	0x00100030
 8005148:	00100020 	.word	0x00100020

0800514c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a4c      	ldr	r2, [pc, #304]	; (80052e0 <TIM_Base_SetConfig+0x144>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d017      	beq.n	80051e4 <TIM_Base_SetConfig+0x48>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ba:	d013      	beq.n	80051e4 <TIM_Base_SetConfig+0x48>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a49      	ldr	r2, [pc, #292]	; (80052e4 <TIM_Base_SetConfig+0x148>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00f      	beq.n	80051e4 <TIM_Base_SetConfig+0x48>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a48      	ldr	r2, [pc, #288]	; (80052e8 <TIM_Base_SetConfig+0x14c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <TIM_Base_SetConfig+0x48>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a47      	ldr	r2, [pc, #284]	; (80052ec <TIM_Base_SetConfig+0x150>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0x48>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a46      	ldr	r2, [pc, #280]	; (80052f0 <TIM_Base_SetConfig+0x154>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x48>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a45      	ldr	r2, [pc, #276]	; (80052f4 <TIM_Base_SetConfig+0x158>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a39      	ldr	r2, [pc, #228]	; (80052e0 <TIM_Base_SetConfig+0x144>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d023      	beq.n	8005246 <TIM_Base_SetConfig+0xaa>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d01f      	beq.n	8005246 <TIM_Base_SetConfig+0xaa>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a36      	ldr	r2, [pc, #216]	; (80052e4 <TIM_Base_SetConfig+0x148>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d01b      	beq.n	8005246 <TIM_Base_SetConfig+0xaa>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a35      	ldr	r2, [pc, #212]	; (80052e8 <TIM_Base_SetConfig+0x14c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d017      	beq.n	8005246 <TIM_Base_SetConfig+0xaa>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a34      	ldr	r2, [pc, #208]	; (80052ec <TIM_Base_SetConfig+0x150>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <TIM_Base_SetConfig+0xaa>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a33      	ldr	r2, [pc, #204]	; (80052f0 <TIM_Base_SetConfig+0x154>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00f      	beq.n	8005246 <TIM_Base_SetConfig+0xaa>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a33      	ldr	r2, [pc, #204]	; (80052f8 <TIM_Base_SetConfig+0x15c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d00b      	beq.n	8005246 <TIM_Base_SetConfig+0xaa>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a32      	ldr	r2, [pc, #200]	; (80052fc <TIM_Base_SetConfig+0x160>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d007      	beq.n	8005246 <TIM_Base_SetConfig+0xaa>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a31      	ldr	r2, [pc, #196]	; (8005300 <TIM_Base_SetConfig+0x164>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d003      	beq.n	8005246 <TIM_Base_SetConfig+0xaa>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <TIM_Base_SetConfig+0x158>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d108      	bne.n	8005258 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800524c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	689a      	ldr	r2, [r3, #8]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a18      	ldr	r2, [pc, #96]	; (80052e0 <TIM_Base_SetConfig+0x144>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d013      	beq.n	80052ac <TIM_Base_SetConfig+0x110>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a1a      	ldr	r2, [pc, #104]	; (80052f0 <TIM_Base_SetConfig+0x154>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00f      	beq.n	80052ac <TIM_Base_SetConfig+0x110>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a1a      	ldr	r2, [pc, #104]	; (80052f8 <TIM_Base_SetConfig+0x15c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00b      	beq.n	80052ac <TIM_Base_SetConfig+0x110>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a19      	ldr	r2, [pc, #100]	; (80052fc <TIM_Base_SetConfig+0x160>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d007      	beq.n	80052ac <TIM_Base_SetConfig+0x110>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a18      	ldr	r2, [pc, #96]	; (8005300 <TIM_Base_SetConfig+0x164>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_Base_SetConfig+0x110>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <TIM_Base_SetConfig+0x158>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d103      	bne.n	80052b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f023 0201 	bic.w	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	611a      	str	r2, [r3, #16]
  }
}
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40013400 	.word	0x40013400
 80052f4:	40015000 	.word	0x40015000
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40014400 	.word	0x40014400
 8005300:	40014800 	.word	0x40014800

08005304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f023 0201 	bic.w	r2, r3, #1
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f023 0302 	bic.w	r3, r3, #2
 8005350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a30      	ldr	r2, [pc, #192]	; (8005420 <TIM_OC1_SetConfig+0x11c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <TIM_OC1_SetConfig+0x88>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a2f      	ldr	r2, [pc, #188]	; (8005424 <TIM_OC1_SetConfig+0x120>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00f      	beq.n	800538c <TIM_OC1_SetConfig+0x88>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a2e      	ldr	r2, [pc, #184]	; (8005428 <TIM_OC1_SetConfig+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00b      	beq.n	800538c <TIM_OC1_SetConfig+0x88>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a2d      	ldr	r2, [pc, #180]	; (800542c <TIM_OC1_SetConfig+0x128>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d007      	beq.n	800538c <TIM_OC1_SetConfig+0x88>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a2c      	ldr	r2, [pc, #176]	; (8005430 <TIM_OC1_SetConfig+0x12c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_OC1_SetConfig+0x88>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a2b      	ldr	r2, [pc, #172]	; (8005434 <TIM_OC1_SetConfig+0x130>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10c      	bne.n	80053a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0308 	bic.w	r3, r3, #8
 8005392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f023 0304 	bic.w	r3, r3, #4
 80053a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1d      	ldr	r2, [pc, #116]	; (8005420 <TIM_OC1_SetConfig+0x11c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <TIM_OC1_SetConfig+0xd2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <TIM_OC1_SetConfig+0x120>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00f      	beq.n	80053d6 <TIM_OC1_SetConfig+0xd2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <TIM_OC1_SetConfig+0x124>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00b      	beq.n	80053d6 <TIM_OC1_SetConfig+0xd2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1a      	ldr	r2, [pc, #104]	; (800542c <TIM_OC1_SetConfig+0x128>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <TIM_OC1_SetConfig+0xd2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <TIM_OC1_SetConfig+0x12c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_OC1_SetConfig+0xd2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <TIM_OC1_SetConfig+0x130>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d111      	bne.n	80053fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	621a      	str	r2, [r3, #32]
}
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40013400 	.word	0x40013400
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800
 8005434:	40015000 	.word	0x40015000

08005438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	f023 0210 	bic.w	r2, r3, #16
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f023 0320 	bic.w	r3, r3, #32
 8005486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a2c      	ldr	r2, [pc, #176]	; (8005548 <TIM_OC2_SetConfig+0x110>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_OC2_SetConfig+0x74>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a2b      	ldr	r2, [pc, #172]	; (800554c <TIM_OC2_SetConfig+0x114>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_OC2_SetConfig+0x74>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a2a      	ldr	r2, [pc, #168]	; (8005550 <TIM_OC2_SetConfig+0x118>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d10d      	bne.n	80054c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <TIM_OC2_SetConfig+0x110>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <TIM_OC2_SetConfig+0xc0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a1e      	ldr	r2, [pc, #120]	; (800554c <TIM_OC2_SetConfig+0x114>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00f      	beq.n	80054f8 <TIM_OC2_SetConfig+0xc0>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <TIM_OC2_SetConfig+0x11c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00b      	beq.n	80054f8 <TIM_OC2_SetConfig+0xc0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <TIM_OC2_SetConfig+0x120>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d007      	beq.n	80054f8 <TIM_OC2_SetConfig+0xc0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a1c      	ldr	r2, [pc, #112]	; (800555c <TIM_OC2_SetConfig+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_OC2_SetConfig+0xc0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a17      	ldr	r2, [pc, #92]	; (8005550 <TIM_OC2_SetConfig+0x118>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d113      	bne.n	8005520 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40013400 	.word	0x40013400
 8005550:	40015000 	.word	0x40015000
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800

08005560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0303 	bic.w	r3, r3, #3
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a2b      	ldr	r2, [pc, #172]	; (800566c <TIM_OC3_SetConfig+0x10c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_OC3_SetConfig+0x72>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <TIM_OC3_SetConfig+0x110>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_OC3_SetConfig+0x72>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a29      	ldr	r2, [pc, #164]	; (8005674 <TIM_OC3_SetConfig+0x114>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10d      	bne.n	80055ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1e      	ldr	r2, [pc, #120]	; (800566c <TIM_OC3_SetConfig+0x10c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d013      	beq.n	800561e <TIM_OC3_SetConfig+0xbe>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1d      	ldr	r2, [pc, #116]	; (8005670 <TIM_OC3_SetConfig+0x110>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00f      	beq.n	800561e <TIM_OC3_SetConfig+0xbe>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <TIM_OC3_SetConfig+0x118>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00b      	beq.n	800561e <TIM_OC3_SetConfig+0xbe>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a1c      	ldr	r2, [pc, #112]	; (800567c <TIM_OC3_SetConfig+0x11c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <TIM_OC3_SetConfig+0xbe>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <TIM_OC3_SetConfig+0x120>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC3_SetConfig+0xbe>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a16      	ldr	r2, [pc, #88]	; (8005674 <TIM_OC3_SetConfig+0x114>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d113      	bne.n	8005646 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800562c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	621a      	str	r2, [r3, #32]
}
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40013400 	.word	0x40013400
 8005674:	40015000 	.word	0x40015000
 8005678:	40014000 	.word	0x40014000
 800567c:	40014400 	.word	0x40014400
 8005680:	40014800 	.word	0x40014800

08005684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	031b      	lsls	r3, r3, #12
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <TIM_OC4_SetConfig+0x110>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d007      	beq.n	80056f8 <TIM_OC4_SetConfig+0x74>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <TIM_OC4_SetConfig+0x114>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_OC4_SetConfig+0x74>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a2a      	ldr	r2, [pc, #168]	; (800579c <TIM_OC4_SetConfig+0x118>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d10d      	bne.n	8005714 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	031b      	lsls	r3, r3, #12
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005712:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a1f      	ldr	r2, [pc, #124]	; (8005794 <TIM_OC4_SetConfig+0x110>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d013      	beq.n	8005744 <TIM_OC4_SetConfig+0xc0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <TIM_OC4_SetConfig+0x114>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00f      	beq.n	8005744 <TIM_OC4_SetConfig+0xc0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <TIM_OC4_SetConfig+0x11c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00b      	beq.n	8005744 <TIM_OC4_SetConfig+0xc0>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <TIM_OC4_SetConfig+0x120>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_OC4_SetConfig+0xc0>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <TIM_OC4_SetConfig+0x124>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC4_SetConfig+0xc0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a17      	ldr	r2, [pc, #92]	; (800579c <TIM_OC4_SetConfig+0x118>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d113      	bne.n	800576c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800574a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005752:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	019b      	lsls	r3, r3, #6
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	019b      	lsls	r3, r3, #6
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40013400 	.word	0x40013400
 800579c:	40015000 	.word	0x40015000
 80057a0:	40014000 	.word	0x40014000
 80057a4:	40014400 	.word	0x40014400
 80057a8:	40014800 	.word	0x40014800

080057ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a19      	ldr	r2, [pc, #100]	; (8005868 <TIM_OC5_SetConfig+0xbc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <TIM_OC5_SetConfig+0x82>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a18      	ldr	r2, [pc, #96]	; (800586c <TIM_OC5_SetConfig+0xc0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00f      	beq.n	800582e <TIM_OC5_SetConfig+0x82>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a17      	ldr	r2, [pc, #92]	; (8005870 <TIM_OC5_SetConfig+0xc4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00b      	beq.n	800582e <TIM_OC5_SetConfig+0x82>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a16      	ldr	r2, [pc, #88]	; (8005874 <TIM_OC5_SetConfig+0xc8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <TIM_OC5_SetConfig+0x82>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a15      	ldr	r2, [pc, #84]	; (8005878 <TIM_OC5_SetConfig+0xcc>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_OC5_SetConfig+0x82>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a14      	ldr	r2, [pc, #80]	; (800587c <TIM_OC5_SetConfig+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d109      	bne.n	8005842 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005834:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	621a      	str	r2, [r3, #32]
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40013400 	.word	0x40013400
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400
 8005878:	40014800 	.word	0x40014800
 800587c:	40015000 	.word	0x40015000

08005880 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	051b      	lsls	r3, r3, #20
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <TIM_OC6_SetConfig+0xc0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d013      	beq.n	8005904 <TIM_OC6_SetConfig+0x84>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a19      	ldr	r2, [pc, #100]	; (8005944 <TIM_OC6_SetConfig+0xc4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00f      	beq.n	8005904 <TIM_OC6_SetConfig+0x84>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a18      	ldr	r2, [pc, #96]	; (8005948 <TIM_OC6_SetConfig+0xc8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00b      	beq.n	8005904 <TIM_OC6_SetConfig+0x84>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a17      	ldr	r2, [pc, #92]	; (800594c <TIM_OC6_SetConfig+0xcc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d007      	beq.n	8005904 <TIM_OC6_SetConfig+0x84>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a16      	ldr	r2, [pc, #88]	; (8005950 <TIM_OC6_SetConfig+0xd0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC6_SetConfig+0x84>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a15      	ldr	r2, [pc, #84]	; (8005954 <TIM_OC6_SetConfig+0xd4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d109      	bne.n	8005918 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	029b      	lsls	r3, r3, #10
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40013400 	.word	0x40013400
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800
 8005954:	40015000 	.word	0x40015000

08005958 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f023 0201 	bic.w	r2, r3, #1
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f023 030a 	bic.w	r3, r3, #10
 8005994:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4313      	orrs	r3, r2
 800599c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	621a      	str	r2, [r3, #32]
}
 80059aa:	bf00      	nop
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b087      	sub	sp, #28
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	60f8      	str	r0, [r7, #12]
 80059be:	60b9      	str	r1, [r7, #8]
 80059c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f023 0210 	bic.w	r2, r3, #16
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	031b      	lsls	r3, r3, #12
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	621a      	str	r2, [r3, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b085      	sub	sp, #20
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f043 0307 	orr.w	r3, r3, #7
 8005a3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	609a      	str	r2, [r3, #8]
}
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	021a      	lsls	r2, r3, #8
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	431a      	orrs	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	609a      	str	r2, [r3, #8]
}
 8005a84:	bf00      	nop
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 031f 	and.w	r3, r3, #31
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1a      	ldr	r2, [r3, #32]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	f003 031f 	and.w	r3, r3, #31
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	371c      	adds	r7, #28
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
	...

08005adc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e074      	b.n	8005bde <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a34      	ldr	r2, [pc, #208]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d009      	beq.n	8005b32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a33      	ldr	r2, [pc, #204]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d004      	beq.n	8005b32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a31      	ldr	r2, [pc, #196]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d108      	bne.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a21      	ldr	r2, [pc, #132]	; (8005bec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d022      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b74:	d01d      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1f      	ldr	r2, [pc, #124]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d018      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a1d      	ldr	r2, [pc, #116]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d013      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a1c      	ldr	r2, [pc, #112]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d00e      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d009      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d004      	beq.n	8005bb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a11      	ldr	r2, [pc, #68]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10c      	bne.n	8005bcc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40012c00 	.word	0x40012c00
 8005bf0:	40013400 	.word	0x40013400
 8005bf4:	40015000 	.word	0x40015000
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40014000 	.word	0x40014000

08005c08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e078      	b.n	8005d16 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	041b      	lsls	r3, r3, #16
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1c      	ldr	r2, [pc, #112]	; (8005d24 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d009      	beq.n	8005cca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a1b      	ldr	r2, [pc, #108]	; (8005d28 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a19      	ldr	r2, [pc, #100]	; (8005d2c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d11c      	bne.n	8005d04 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd4:	051b      	lsls	r3, r3, #20
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6a1b      	ldr	r3, [r3, #32]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40013400 	.word	0x40013400
 8005d2c:	40015000 	.word	0x40015000

08005d30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d4c:	bf00      	nop
 8005d4e:	370c      	adds	r7, #12
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b083      	sub	sp, #12
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d60:	bf00      	nop
 8005d62:	370c      	adds	r7, #12
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005d74:	bf00      	nop
 8005d76:	370c      	adds	r7, #12
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e042      	b.n	8005e54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d106      	bne.n	8005de6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7fb f805 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2224      	movs	r2, #36	; 0x24
 8005dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0201 	bic.w	r2, r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fbb2 	bl	8006570 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f8b3 	bl	8005f78 <UART_SetConfig>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d101      	bne.n	8005e1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e01b      	b.n	8005e54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0201 	orr.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fc31 	bl	80066b4 <UART_CheckIdleState>
 8005e52:	4603      	mov	r3, r0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b08a      	sub	sp, #40	; 0x28
 8005e60:	af02      	add	r7, sp, #8
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	603b      	str	r3, [r7, #0]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e72:	2b20      	cmp	r3, #32
 8005e74:	d17b      	bne.n	8005f6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <HAL_UART_Transmit+0x26>
 8005e7c:	88fb      	ldrh	r3, [r7, #6]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e074      	b.n	8005f70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2221      	movs	r2, #33	; 0x21
 8005e92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e96:	f7fb f8e1 	bl	800105c <HAL_GetTick>
 8005e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	88fa      	ldrh	r2, [r7, #6]
 8005ea0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	88fa      	ldrh	r2, [r7, #6]
 8005ea8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb4:	d108      	bne.n	8005ec8 <HAL_UART_Transmit+0x6c>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	61bb      	str	r3, [r7, #24]
 8005ec6:	e003      	b.n	8005ed0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ed0:	e030      	b.n	8005f34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	9300      	str	r3, [sp, #0]
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2180      	movs	r1, #128	; 0x80
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 fc93 	bl	8006808 <UART_WaitOnFlagUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d005      	beq.n	8005ef4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e03d      	b.n	8005f70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d10b      	bne.n	8005f12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	461a      	mov	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	3302      	adds	r3, #2
 8005f0e:	61bb      	str	r3, [r7, #24]
 8005f10:	e007      	b.n	8005f22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	781a      	ldrb	r2, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1c8      	bne.n	8005ed2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2200      	movs	r2, #0
 8005f48:	2140      	movs	r1, #64	; 0x40
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fc5c 	bl	8006808 <UART_WaitOnFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e006      	b.n	8005f70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e000      	b.n	8005f70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
  }
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3720      	adds	r7, #32
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f7c:	b08c      	sub	sp, #48	; 0x30
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	689a      	ldr	r2, [r3, #8]
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	431a      	orrs	r2, r3
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	69db      	ldr	r3, [r3, #28]
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4baa      	ldr	r3, [pc, #680]	; (8006250 <UART_SetConfig+0x2d8>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	6812      	ldr	r2, [r2, #0]
 8005fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fb0:	430b      	orrs	r3, r1
 8005fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a9f      	ldr	r2, [pc, #636]	; (8006254 <UART_SetConfig+0x2dc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005fee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	6812      	ldr	r2, [r2, #0]
 8005ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006002:	f023 010f 	bic.w	r1, r3, #15
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a90      	ldr	r2, [pc, #576]	; (8006258 <UART_SetConfig+0x2e0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d125      	bne.n	8006068 <UART_SetConfig+0xf0>
 800601c:	4b8f      	ldr	r3, [pc, #572]	; (800625c <UART_SetConfig+0x2e4>)
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b03      	cmp	r3, #3
 8006028:	d81a      	bhi.n	8006060 <UART_SetConfig+0xe8>
 800602a:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <UART_SetConfig+0xb8>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006041 	.word	0x08006041
 8006034:	08006051 	.word	0x08006051
 8006038:	08006049 	.word	0x08006049
 800603c:	08006059 	.word	0x08006059
 8006040:	2301      	movs	r3, #1
 8006042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006046:	e116      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006048:	2302      	movs	r3, #2
 800604a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800604e:	e112      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006050:	2304      	movs	r3, #4
 8006052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006056:	e10e      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006058:	2308      	movs	r3, #8
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800605e:	e10a      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006060:	2310      	movs	r3, #16
 8006062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006066:	e106      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a7c      	ldr	r2, [pc, #496]	; (8006260 <UART_SetConfig+0x2e8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d138      	bne.n	80060e4 <UART_SetConfig+0x16c>
 8006072:	4b7a      	ldr	r3, [pc, #488]	; (800625c <UART_SetConfig+0x2e4>)
 8006074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006078:	f003 030c 	and.w	r3, r3, #12
 800607c:	2b0c      	cmp	r3, #12
 800607e:	d82d      	bhi.n	80060dc <UART_SetConfig+0x164>
 8006080:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <UART_SetConfig+0x110>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060bd 	.word	0x080060bd
 800608c:	080060dd 	.word	0x080060dd
 8006090:	080060dd 	.word	0x080060dd
 8006094:	080060dd 	.word	0x080060dd
 8006098:	080060cd 	.word	0x080060cd
 800609c:	080060dd 	.word	0x080060dd
 80060a0:	080060dd 	.word	0x080060dd
 80060a4:	080060dd 	.word	0x080060dd
 80060a8:	080060c5 	.word	0x080060c5
 80060ac:	080060dd 	.word	0x080060dd
 80060b0:	080060dd 	.word	0x080060dd
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060d5 	.word	0x080060d5
 80060bc:	2300      	movs	r3, #0
 80060be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c2:	e0d8      	b.n	8006276 <UART_SetConfig+0x2fe>
 80060c4:	2302      	movs	r3, #2
 80060c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ca:	e0d4      	b.n	8006276 <UART_SetConfig+0x2fe>
 80060cc:	2304      	movs	r3, #4
 80060ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d2:	e0d0      	b.n	8006276 <UART_SetConfig+0x2fe>
 80060d4:	2308      	movs	r3, #8
 80060d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060da:	e0cc      	b.n	8006276 <UART_SetConfig+0x2fe>
 80060dc:	2310      	movs	r3, #16
 80060de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e2:	e0c8      	b.n	8006276 <UART_SetConfig+0x2fe>
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a5e      	ldr	r2, [pc, #376]	; (8006264 <UART_SetConfig+0x2ec>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d125      	bne.n	800613a <UART_SetConfig+0x1c2>
 80060ee:	4b5b      	ldr	r3, [pc, #364]	; (800625c <UART_SetConfig+0x2e4>)
 80060f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060f8:	2b30      	cmp	r3, #48	; 0x30
 80060fa:	d016      	beq.n	800612a <UART_SetConfig+0x1b2>
 80060fc:	2b30      	cmp	r3, #48	; 0x30
 80060fe:	d818      	bhi.n	8006132 <UART_SetConfig+0x1ba>
 8006100:	2b20      	cmp	r3, #32
 8006102:	d00a      	beq.n	800611a <UART_SetConfig+0x1a2>
 8006104:	2b20      	cmp	r3, #32
 8006106:	d814      	bhi.n	8006132 <UART_SetConfig+0x1ba>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <UART_SetConfig+0x19a>
 800610c:	2b10      	cmp	r3, #16
 800610e:	d008      	beq.n	8006122 <UART_SetConfig+0x1aa>
 8006110:	e00f      	b.n	8006132 <UART_SetConfig+0x1ba>
 8006112:	2300      	movs	r3, #0
 8006114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006118:	e0ad      	b.n	8006276 <UART_SetConfig+0x2fe>
 800611a:	2302      	movs	r3, #2
 800611c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006120:	e0a9      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006122:	2304      	movs	r3, #4
 8006124:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006128:	e0a5      	b.n	8006276 <UART_SetConfig+0x2fe>
 800612a:	2308      	movs	r3, #8
 800612c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006130:	e0a1      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006132:	2310      	movs	r3, #16
 8006134:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006138:	e09d      	b.n	8006276 <UART_SetConfig+0x2fe>
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a4a      	ldr	r2, [pc, #296]	; (8006268 <UART_SetConfig+0x2f0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d125      	bne.n	8006190 <UART_SetConfig+0x218>
 8006144:	4b45      	ldr	r3, [pc, #276]	; (800625c <UART_SetConfig+0x2e4>)
 8006146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800614e:	2bc0      	cmp	r3, #192	; 0xc0
 8006150:	d016      	beq.n	8006180 <UART_SetConfig+0x208>
 8006152:	2bc0      	cmp	r3, #192	; 0xc0
 8006154:	d818      	bhi.n	8006188 <UART_SetConfig+0x210>
 8006156:	2b80      	cmp	r3, #128	; 0x80
 8006158:	d00a      	beq.n	8006170 <UART_SetConfig+0x1f8>
 800615a:	2b80      	cmp	r3, #128	; 0x80
 800615c:	d814      	bhi.n	8006188 <UART_SetConfig+0x210>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <UART_SetConfig+0x1f0>
 8006162:	2b40      	cmp	r3, #64	; 0x40
 8006164:	d008      	beq.n	8006178 <UART_SetConfig+0x200>
 8006166:	e00f      	b.n	8006188 <UART_SetConfig+0x210>
 8006168:	2300      	movs	r3, #0
 800616a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800616e:	e082      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006170:	2302      	movs	r3, #2
 8006172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006176:	e07e      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006178:	2304      	movs	r3, #4
 800617a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800617e:	e07a      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006180:	2308      	movs	r3, #8
 8006182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006186:	e076      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006188:	2310      	movs	r3, #16
 800618a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800618e:	e072      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a35      	ldr	r2, [pc, #212]	; (800626c <UART_SetConfig+0x2f4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d12a      	bne.n	80061f0 <UART_SetConfig+0x278>
 800619a:	4b30      	ldr	r3, [pc, #192]	; (800625c <UART_SetConfig+0x2e4>)
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061a8:	d01a      	beq.n	80061e0 <UART_SetConfig+0x268>
 80061aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ae:	d81b      	bhi.n	80061e8 <UART_SetConfig+0x270>
 80061b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b4:	d00c      	beq.n	80061d0 <UART_SetConfig+0x258>
 80061b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ba:	d815      	bhi.n	80061e8 <UART_SetConfig+0x270>
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <UART_SetConfig+0x250>
 80061c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c4:	d008      	beq.n	80061d8 <UART_SetConfig+0x260>
 80061c6:	e00f      	b.n	80061e8 <UART_SetConfig+0x270>
 80061c8:	2300      	movs	r3, #0
 80061ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ce:	e052      	b.n	8006276 <UART_SetConfig+0x2fe>
 80061d0:	2302      	movs	r3, #2
 80061d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061d6:	e04e      	b.n	8006276 <UART_SetConfig+0x2fe>
 80061d8:	2304      	movs	r3, #4
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061de:	e04a      	b.n	8006276 <UART_SetConfig+0x2fe>
 80061e0:	2308      	movs	r3, #8
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061e6:	e046      	b.n	8006276 <UART_SetConfig+0x2fe>
 80061e8:	2310      	movs	r3, #16
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ee:	e042      	b.n	8006276 <UART_SetConfig+0x2fe>
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a17      	ldr	r2, [pc, #92]	; (8006254 <UART_SetConfig+0x2dc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d13a      	bne.n	8006270 <UART_SetConfig+0x2f8>
 80061fa:	4b18      	ldr	r3, [pc, #96]	; (800625c <UART_SetConfig+0x2e4>)
 80061fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006200:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006204:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006208:	d01a      	beq.n	8006240 <UART_SetConfig+0x2c8>
 800620a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800620e:	d81b      	bhi.n	8006248 <UART_SetConfig+0x2d0>
 8006210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006214:	d00c      	beq.n	8006230 <UART_SetConfig+0x2b8>
 8006216:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621a:	d815      	bhi.n	8006248 <UART_SetConfig+0x2d0>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <UART_SetConfig+0x2b0>
 8006220:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006224:	d008      	beq.n	8006238 <UART_SetConfig+0x2c0>
 8006226:	e00f      	b.n	8006248 <UART_SetConfig+0x2d0>
 8006228:	2300      	movs	r3, #0
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800622e:	e022      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006230:	2302      	movs	r3, #2
 8006232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006236:	e01e      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623e:	e01a      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006246:	e016      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800624e:	e012      	b.n	8006276 <UART_SetConfig+0x2fe>
 8006250:	cfff69f3 	.word	0xcfff69f3
 8006254:	40008000 	.word	0x40008000
 8006258:	40013800 	.word	0x40013800
 800625c:	40021000 	.word	0x40021000
 8006260:	40004400 	.word	0x40004400
 8006264:	40004800 	.word	0x40004800
 8006268:	40004c00 	.word	0x40004c00
 800626c:	40005000 	.word	0x40005000
 8006270:	2310      	movs	r3, #16
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4aae      	ldr	r2, [pc, #696]	; (8006534 <UART_SetConfig+0x5bc>)
 800627c:	4293      	cmp	r3, r2
 800627e:	f040 8097 	bne.w	80063b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006282:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006286:	2b08      	cmp	r3, #8
 8006288:	d823      	bhi.n	80062d2 <UART_SetConfig+0x35a>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0x318>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062b5 	.word	0x080062b5
 8006294:	080062d3 	.word	0x080062d3
 8006298:	080062bd 	.word	0x080062bd
 800629c:	080062d3 	.word	0x080062d3
 80062a0:	080062c3 	.word	0x080062c3
 80062a4:	080062d3 	.word	0x080062d3
 80062a8:	080062d3 	.word	0x080062d3
 80062ac:	080062d3 	.word	0x080062d3
 80062b0:	080062cb 	.word	0x080062cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b4:	f7fd fdc0 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 80062b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062ba:	e010      	b.n	80062de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062bc:	4b9e      	ldr	r3, [pc, #632]	; (8006538 <UART_SetConfig+0x5c0>)
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062c0:	e00d      	b.n	80062de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c2:	f7fd fd4b 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 80062c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062c8:	e009      	b.n	80062de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062d0:	e005      	b.n	80062de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f000 8130 	beq.w	8006546 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	4a94      	ldr	r2, [pc, #592]	; (800653c <UART_SetConfig+0x5c4>)
 80062ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f0:	461a      	mov	r2, r3
 80062f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	4413      	add	r3, r2
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	429a      	cmp	r2, r3
 8006308:	d305      	bcc.n	8006316 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	429a      	cmp	r2, r3
 8006314:	d903      	bls.n	800631e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800631c:	e113      	b.n	8006546 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	2200      	movs	r2, #0
 8006322:	60bb      	str	r3, [r7, #8]
 8006324:	60fa      	str	r2, [r7, #12]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	4a84      	ldr	r2, [pc, #528]	; (800653c <UART_SetConfig+0x5c4>)
 800632c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006330:	b29b      	uxth	r3, r3
 8006332:	2200      	movs	r2, #0
 8006334:	603b      	str	r3, [r7, #0]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800633c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006340:	f7f9 ff6a 	bl	8000218 <__aeabi_uldivmod>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4610      	mov	r0, r2
 800634a:	4619      	mov	r1, r3
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	020b      	lsls	r3, r1, #8
 8006356:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800635a:	0202      	lsls	r2, r0, #8
 800635c:	6979      	ldr	r1, [r7, #20]
 800635e:	6849      	ldr	r1, [r1, #4]
 8006360:	0849      	lsrs	r1, r1, #1
 8006362:	2000      	movs	r0, #0
 8006364:	460c      	mov	r4, r1
 8006366:	4605      	mov	r5, r0
 8006368:	eb12 0804 	adds.w	r8, r2, r4
 800636c:	eb43 0905 	adc.w	r9, r3, r5
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	469a      	mov	sl, r3
 8006378:	4693      	mov	fp, r2
 800637a:	4652      	mov	r2, sl
 800637c:	465b      	mov	r3, fp
 800637e:	4640      	mov	r0, r8
 8006380:	4649      	mov	r1, r9
 8006382:	f7f9 ff49 	bl	8000218 <__aeabi_uldivmod>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4613      	mov	r3, r2
 800638c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006394:	d308      	bcc.n	80063a8 <UART_SetConfig+0x430>
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800639c:	d204      	bcs.n	80063a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6a3a      	ldr	r2, [r7, #32]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	e0ce      	b.n	8006546 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063ae:	e0ca      	b.n	8006546 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063b8:	d166      	bne.n	8006488 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80063ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d827      	bhi.n	8006412 <UART_SetConfig+0x49a>
 80063c2:	a201      	add	r2, pc, #4	; (adr r2, 80063c8 <UART_SetConfig+0x450>)
 80063c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c8:	080063ed 	.word	0x080063ed
 80063cc:	080063f5 	.word	0x080063f5
 80063d0:	080063fd 	.word	0x080063fd
 80063d4:	08006413 	.word	0x08006413
 80063d8:	08006403 	.word	0x08006403
 80063dc:	08006413 	.word	0x08006413
 80063e0:	08006413 	.word	0x08006413
 80063e4:	08006413 	.word	0x08006413
 80063e8:	0800640b 	.word	0x0800640b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ec:	f7fd fd24 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 80063f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063f2:	e014      	b.n	800641e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f4:	f7fd fd36 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 80063f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063fa:	e010      	b.n	800641e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063fc:	4b4e      	ldr	r3, [pc, #312]	; (8006538 <UART_SetConfig+0x5c0>)
 80063fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006400:	e00d      	b.n	800641e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006402:	f7fd fcab 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 8006406:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006408:	e009      	b.n	800641e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006410:	e005      	b.n	800641e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006412:	2300      	movs	r3, #0
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800641c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8090 	beq.w	8006546 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	4a44      	ldr	r2, [pc, #272]	; (800653c <UART_SetConfig+0x5c4>)
 800642c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006430:	461a      	mov	r2, r3
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	fbb3 f3f2 	udiv	r3, r3, r2
 8006438:	005a      	lsls	r2, r3, #1
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	441a      	add	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	fbb2 f3f3 	udiv	r3, r2, r3
 800644a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	2b0f      	cmp	r3, #15
 8006450:	d916      	bls.n	8006480 <UART_SetConfig+0x508>
 8006452:	6a3b      	ldr	r3, [r7, #32]
 8006454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006458:	d212      	bcs.n	8006480 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f023 030f 	bic.w	r3, r3, #15
 8006462:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	085b      	lsrs	r3, r3, #1
 8006468:	b29b      	uxth	r3, r3
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	b29a      	uxth	r2, r3
 8006470:	8bfb      	ldrh	r3, [r7, #30]
 8006472:	4313      	orrs	r3, r2
 8006474:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	8bfa      	ldrh	r2, [r7, #30]
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	e062      	b.n	8006546 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006486:	e05e      	b.n	8006546 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006488:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800648c:	2b08      	cmp	r3, #8
 800648e:	d828      	bhi.n	80064e2 <UART_SetConfig+0x56a>
 8006490:	a201      	add	r2, pc, #4	; (adr r2, 8006498 <UART_SetConfig+0x520>)
 8006492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006496:	bf00      	nop
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064c5 	.word	0x080064c5
 80064a0:	080064cd 	.word	0x080064cd
 80064a4:	080064e3 	.word	0x080064e3
 80064a8:	080064d3 	.word	0x080064d3
 80064ac:	080064e3 	.word	0x080064e3
 80064b0:	080064e3 	.word	0x080064e3
 80064b4:	080064e3 	.word	0x080064e3
 80064b8:	080064db 	.word	0x080064db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064bc:	f7fd fcbc 	bl	8003e38 <HAL_RCC_GetPCLK1Freq>
 80064c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064c2:	e014      	b.n	80064ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c4:	f7fd fcce 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 80064c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064ca:	e010      	b.n	80064ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064cc:	4b1a      	ldr	r3, [pc, #104]	; (8006538 <UART_SetConfig+0x5c0>)
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064d0:	e00d      	b.n	80064ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d2:	f7fd fc43 	bl	8003d5c <HAL_RCC_GetSysClockFreq>
 80064d6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064d8:	e009      	b.n	80064ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064e0:	e005      	b.n	80064ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80064e2:	2300      	movs	r3, #0
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064ec:	bf00      	nop
    }

    if (pclk != 0U)
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d028      	beq.n	8006546 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	4a10      	ldr	r2, [pc, #64]	; (800653c <UART_SetConfig+0x5c4>)
 80064fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064fe:	461a      	mov	r2, r3
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	fbb3 f2f2 	udiv	r2, r3, r2
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	085b      	lsrs	r3, r3, #1
 800650c:	441a      	add	r2, r3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	fbb2 f3f3 	udiv	r3, r2, r3
 8006516:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	2b0f      	cmp	r3, #15
 800651c:	d910      	bls.n	8006540 <UART_SetConfig+0x5c8>
 800651e:	6a3b      	ldr	r3, [r7, #32]
 8006520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006524:	d20c      	bcs.n	8006540 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	b29a      	uxth	r2, r3
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60da      	str	r2, [r3, #12]
 8006530:	e009      	b.n	8006546 <UART_SetConfig+0x5ce>
 8006532:	bf00      	nop
 8006534:	40008000 	.word	0x40008000
 8006538:	00f42400 	.word	0x00f42400
 800653c:	08006c3c 	.word	0x08006c3c
      }
      else
      {
        ret = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2201      	movs	r2, #1
 800654a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2201      	movs	r2, #1
 8006552:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2200      	movs	r2, #0
 800655a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	2200      	movs	r2, #0
 8006560:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006562:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006566:	4618      	mov	r0, r3
 8006568:	3730      	adds	r7, #48	; 0x30
 800656a:	46bd      	mov	sp, r7
 800656c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006570 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00a      	beq.n	800659a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	430a      	orrs	r2, r1
 80065dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e2:	f003 0304 	and.w	r3, r3, #4
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	430a      	orrs	r2, r1
 80065fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006604:	f003 0310 	and.w	r3, r3, #16
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	430a      	orrs	r2, r1
 8006620:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01a      	beq.n	8006686 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	430a      	orrs	r2, r1
 8006664:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800666e:	d10a      	bne.n	8006686 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	605a      	str	r2, [r3, #4]
  }
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b098      	sub	sp, #96	; 0x60
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066c4:	f7fa fcca 	bl	800105c <HAL_GetTick>
 80066c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d12f      	bne.n	8006738 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066e0:	2200      	movs	r2, #0
 80066e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 f88e 	bl	8006808 <UART_WaitOnFlagUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d022      	beq.n	8006738 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066fa:	e853 3f00 	ldrex	r3, [r3]
 80066fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006706:	653b      	str	r3, [r7, #80]	; 0x50
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	461a      	mov	r2, r3
 800670e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006710:	647b      	str	r3, [r7, #68]	; 0x44
 8006712:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800671e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e6      	bne.n	80066f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e063      	b.n	8006800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b04      	cmp	r3, #4
 8006744:	d149      	bne.n	80067da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006746:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800674e:	2200      	movs	r2, #0
 8006750:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 f857 	bl	8006808 <UART_WaitOnFlagUntilTimeout>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d03c      	beq.n	80067da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	623b      	str	r3, [r7, #32]
   return(result);
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006774:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677e:	633b      	str	r3, [r7, #48]	; 0x30
 8006780:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800678c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e6      	bne.n	8006760 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3308      	adds	r3, #8
 80067b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067b2:	61fa      	str	r2, [r7, #28]
 80067b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	69b9      	ldr	r1, [r7, #24]
 80067b8:	69fa      	ldr	r2, [r7, #28]
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	617b      	str	r3, [r7, #20]
   return(result);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e5      	bne.n	8006792 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e012      	b.n	8006800 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2220      	movs	r2, #32
 80067e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3758      	adds	r7, #88	; 0x58
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	603b      	str	r3, [r7, #0]
 8006814:	4613      	mov	r3, r2
 8006816:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006818:	e04f      	b.n	80068ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006820:	d04b      	beq.n	80068ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006822:	f7fa fc1b 	bl	800105c <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	429a      	cmp	r2, r3
 8006830:	d302      	bcc.n	8006838 <UART_WaitOnFlagUntilTimeout+0x30>
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e04e      	b.n	80068da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d037      	beq.n	80068ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2b80      	cmp	r3, #128	; 0x80
 800684e:	d034      	beq.n	80068ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2b40      	cmp	r3, #64	; 0x40
 8006854:	d031      	beq.n	80068ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b08      	cmp	r3, #8
 8006862:	d110      	bne.n	8006886 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2208      	movs	r2, #8
 800686a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f000 f838 	bl	80068e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2208      	movs	r2, #8
 8006876:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e029      	b.n	80068da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006890:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006894:	d111      	bne.n	80068ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800689e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f000 f81e 	bl	80068e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e00f      	b.n	80068da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69da      	ldr	r2, [r3, #28]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4013      	ands	r3, r2
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	bf0c      	ite	eq
 80068ca:	2301      	moveq	r3, #1
 80068cc:	2300      	movne	r3, #0
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d0a0      	beq.n	800681a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b095      	sub	sp, #84	; 0x54
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006908:	643b      	str	r3, [r7, #64]	; 0x40
 800690a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800690e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e6      	bne.n	80068ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3308      	adds	r3, #8
 8006922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	61fb      	str	r3, [r7, #28]
   return(result);
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006932:	f023 0301 	bic.w	r3, r3, #1
 8006936:	64bb      	str	r3, [r7, #72]	; 0x48
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3308      	adds	r3, #8
 800693e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006940:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006942:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800694e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e3      	bne.n	800691c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006958:	2b01      	cmp	r3, #1
 800695a:	d118      	bne.n	800698e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	60bb      	str	r3, [r7, #8]
   return(result);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f023 0310 	bic.w	r3, r3, #16
 8006970:	647b      	str	r3, [r7, #68]	; 0x44
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6979      	ldr	r1, [r7, #20]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	613b      	str	r3, [r7, #16]
   return(result);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e6      	bne.n	800695c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80069a2:	bf00      	nop
 80069a4:	3754      	adds	r7, #84	; 0x54
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e027      	b.n	8006a14 <HAL_UARTEx_DisableFifoMode+0x66>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2224      	movs	r2, #36	; 0x24
 80069d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 0201 	bic.w	r2, r2, #1
 80069ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d101      	bne.n	8006a38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a34:	2302      	movs	r3, #2
 8006a36:	e02d      	b.n	8006a94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2224      	movs	r2, #36	; 0x24
 8006a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0201 	bic.w	r2, r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f84f 	bl	8006b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d101      	bne.n	8006ab4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e02d      	b.n	8006b10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2224      	movs	r2, #36	; 0x24
 8006ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 0201 	bic.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	683a      	ldr	r2, [r7, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f811 	bl	8006b18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d108      	bne.n	8006b3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b38:	e031      	b.n	8006b9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b3a:	2308      	movs	r3, #8
 8006b3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b3e:	2308      	movs	r3, #8
 8006b40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	0e5b      	lsrs	r3, r3, #25
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	f003 0307 	and.w	r3, r3, #7
 8006b50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	0f5b      	lsrs	r3, r3, #29
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	f003 0307 	and.w	r3, r3, #7
 8006b60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	7b3a      	ldrb	r2, [r7, #12]
 8006b66:	4911      	ldr	r1, [pc, #68]	; (8006bac <UARTEx_SetNbDataToProcess+0x94>)
 8006b68:	5c8a      	ldrb	r2, [r1, r2]
 8006b6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b6e:	7b3a      	ldrb	r2, [r7, #12]
 8006b70:	490f      	ldr	r1, [pc, #60]	; (8006bb0 <UARTEx_SetNbDataToProcess+0x98>)
 8006b72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b74:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	7b7a      	ldrb	r2, [r7, #13]
 8006b84:	4909      	ldr	r1, [pc, #36]	; (8006bac <UARTEx_SetNbDataToProcess+0x94>)
 8006b86:	5c8a      	ldrb	r2, [r1, r2]
 8006b88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b8c:	7b7a      	ldrb	r2, [r7, #13]
 8006b8e:	4908      	ldr	r1, [pc, #32]	; (8006bb0 <UARTEx_SetNbDataToProcess+0x98>)
 8006b90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b92:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b9e:	bf00      	nop
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	08006c54 	.word	0x08006c54
 8006bb0:	08006c5c 	.word	0x08006c5c

08006bb4 <__libc_init_array>:
 8006bb4:	b570      	push	{r4, r5, r6, lr}
 8006bb6:	4d0d      	ldr	r5, [pc, #52]	; (8006bec <__libc_init_array+0x38>)
 8006bb8:	4c0d      	ldr	r4, [pc, #52]	; (8006bf0 <__libc_init_array+0x3c>)
 8006bba:	1b64      	subs	r4, r4, r5
 8006bbc:	10a4      	asrs	r4, r4, #2
 8006bbe:	2600      	movs	r6, #0
 8006bc0:	42a6      	cmp	r6, r4
 8006bc2:	d109      	bne.n	8006bd8 <__libc_init_array+0x24>
 8006bc4:	4d0b      	ldr	r5, [pc, #44]	; (8006bf4 <__libc_init_array+0x40>)
 8006bc6:	4c0c      	ldr	r4, [pc, #48]	; (8006bf8 <__libc_init_array+0x44>)
 8006bc8:	f000 f820 	bl	8006c0c <_init>
 8006bcc:	1b64      	subs	r4, r4, r5
 8006bce:	10a4      	asrs	r4, r4, #2
 8006bd0:	2600      	movs	r6, #0
 8006bd2:	42a6      	cmp	r6, r4
 8006bd4:	d105      	bne.n	8006be2 <__libc_init_array+0x2e>
 8006bd6:	bd70      	pop	{r4, r5, r6, pc}
 8006bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bdc:	4798      	blx	r3
 8006bde:	3601      	adds	r6, #1
 8006be0:	e7ee      	b.n	8006bc0 <__libc_init_array+0xc>
 8006be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be6:	4798      	blx	r3
 8006be8:	3601      	adds	r6, #1
 8006bea:	e7f2      	b.n	8006bd2 <__libc_init_array+0x1e>
 8006bec:	08006c6c 	.word	0x08006c6c
 8006bf0:	08006c6c 	.word	0x08006c6c
 8006bf4:	08006c6c 	.word	0x08006c6c
 8006bf8:	08006c70 	.word	0x08006c70

08006bfc <memset>:
 8006bfc:	4402      	add	r2, r0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d100      	bne.n	8006c06 <memset+0xa>
 8006c04:	4770      	bx	lr
 8006c06:	f803 1b01 	strb.w	r1, [r3], #1
 8006c0a:	e7f9      	b.n	8006c00 <memset+0x4>

08006c0c <_init>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	bf00      	nop
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr

08006c18 <_fini>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr
