// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/23/2024 13:47:46"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    EDA3_coincharger
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module EDA3_coincharger_vlg_sample_tst(
	c0,
	c1,
	c2,
	c3,
	CLK,
	sampler_tx
);
input  c0;
input  c1;
input  c2;
input  c3;
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(c0 or c1 or c2 or c3 or CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module EDA3_coincharger_vlg_check_tst (
	DIG0,
	DIG1,
	DIG2,
	DIG3,
	OA,
	OB,
	OC,
	OD,
	OE,
	OF,
	OG,
	r,
	sampler_rx
);
input  DIG0;
input  DIG1;
input  DIG2;
input  DIG3;
input  OA;
input  OB;
input  OC;
input  OD;
input  OE;
input  OF;
input  OG;
input [3:0] r;
input sampler_rx;

reg  DIG0_expected;
reg  DIG1_expected;
reg  DIG2_expected;
reg  DIG3_expected;
reg  OA_expected;
reg  OB_expected;
reg  OC_expected;
reg  OD_expected;
reg  OE_expected;
reg  OF_expected;
reg  OG_expected;
reg [3:0] r_expected;

reg  DIG0_prev;
reg  DIG1_prev;
reg  DIG2_prev;
reg  DIG3_prev;
reg  OA_prev;
reg  OB_prev;
reg  OC_prev;
reg  OD_prev;
reg  OE_prev;
reg  OF_prev;
reg  OG_prev;
reg [3:0] r_prev;

reg  DIG0_expected_prev;
reg  DIG1_expected_prev;
reg  DIG2_expected_prev;
reg  DIG3_expected_prev;
reg  OA_expected_prev;
reg  OB_expected_prev;
reg  OC_expected_prev;
reg  OD_expected_prev;
reg  OE_expected_prev;
reg  OF_expected_prev;
reg  OG_expected_prev;
reg [3:0] r_expected_prev;

reg  last_DIG0_exp;
reg  last_DIG1_exp;
reg  last_DIG2_exp;
reg  last_DIG3_exp;
reg  last_OA_exp;
reg  last_OB_exp;
reg  last_OC_exp;
reg  last_OD_exp;
reg  last_OE_exp;
reg  last_OF_exp;
reg  last_OG_exp;
reg [3:0] last_r_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	DIG0_prev = DIG0;
	DIG1_prev = DIG1;
	DIG2_prev = DIG2;
	DIG3_prev = DIG3;
	OA_prev = OA;
	OB_prev = OB;
	OC_prev = OC;
	OD_prev = OD;
	OE_prev = OE;
	OF_prev = OF;
	OG_prev = OG;
	r_prev = r;
end

// update expected /o prevs

always @(trigger)
begin
	DIG0_expected_prev = DIG0_expected;
	DIG1_expected_prev = DIG1_expected;
	DIG2_expected_prev = DIG2_expected;
	DIG3_expected_prev = DIG3_expected;
	OA_expected_prev = OA_expected;
	OB_expected_prev = OB_expected;
	OC_expected_prev = OC_expected;
	OD_expected_prev = OD_expected;
	OE_expected_prev = OE_expected;
	OF_expected_prev = OF_expected;
	OG_expected_prev = OG_expected;
	r_expected_prev = r_expected;
end



// expected DIG0
initial
begin
	DIG0_expected = 1'bX;
end 

// expected DIG1
initial
begin
	DIG1_expected = 1'bX;
end 

// expected DIG2
initial
begin
	DIG2_expected = 1'bX;
end 

// expected DIG3
initial
begin
	DIG3_expected = 1'bX;
end 

// expected OA
initial
begin
	OA_expected = 1'bX;
end 

// expected OB
initial
begin
	OB_expected = 1'bX;
end 

// expected OC
initial
begin
	OC_expected = 1'bX;
end 

// expected OD
initial
begin
	OD_expected = 1'bX;
end 

// expected OE
initial
begin
	OE_expected = 1'bX;
end 

// expected OF
initial
begin
	OF_expected = 1'bX;
end 

// expected OG
initial
begin
	OG_expected = 1'bX;
end 
// expected r[ 3 ]
initial
begin
	r_expected[3] = 1'bX;
end 
// expected r[ 2 ]
initial
begin
	r_expected[2] = 1'bX;
end 
// expected r[ 1 ]
initial
begin
	r_expected[1] = 1'bX;
end 
// expected r[ 0 ]
initial
begin
	r_expected[0] = 1'bX;
end 
// generate trigger
always @(DIG0_expected or DIG0 or DIG1_expected or DIG1 or DIG2_expected or DIG2 or DIG3_expected or DIG3 or OA_expected or OA or OB_expected or OB or OC_expected or OC or OD_expected or OD or OE_expected or OE or OF_expected or OF or OG_expected or OG or r_expected or r)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DIG0 = %b | expected DIG1 = %b | expected DIG2 = %b | expected DIG3 = %b | expected OA = %b | expected OB = %b | expected OC = %b | expected OD = %b | expected OE = %b | expected OF = %b | expected OG = %b | expected r = %b | ",DIG0_expected_prev,DIG1_expected_prev,DIG2_expected_prev,DIG3_expected_prev,OA_expected_prev,OB_expected_prev,OC_expected_prev,OD_expected_prev,OE_expected_prev,OF_expected_prev,OG_expected_prev,r_expected_prev);
	$display("| real DIG0 = %b | real DIG1 = %b | real DIG2 = %b | real DIG3 = %b | real OA = %b | real OB = %b | real OC = %b | real OD = %b | real OE = %b | real OF = %b | real OG = %b | real r = %b | ",DIG0_prev,DIG1_prev,DIG2_prev,DIG3_prev,OA_prev,OB_prev,OC_prev,OD_prev,OE_prev,OF_prev,OG_prev,r_prev);
`endif
	if (
		( DIG0_expected_prev !== 1'bx ) && ( DIG0_prev !== DIG0_expected_prev )
		&& ((DIG0_expected_prev !== last_DIG0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG0_expected_prev);
		$display ("     Real value = %b", DIG0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DIG0_exp = DIG0_expected_prev;
	end
	if (
		( DIG1_expected_prev !== 1'bx ) && ( DIG1_prev !== DIG1_expected_prev )
		&& ((DIG1_expected_prev !== last_DIG1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG1_expected_prev);
		$display ("     Real value = %b", DIG1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DIG1_exp = DIG1_expected_prev;
	end
	if (
		( DIG2_expected_prev !== 1'bx ) && ( DIG2_prev !== DIG2_expected_prev )
		&& ((DIG2_expected_prev !== last_DIG2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG2_expected_prev);
		$display ("     Real value = %b", DIG2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DIG2_exp = DIG2_expected_prev;
	end
	if (
		( DIG3_expected_prev !== 1'bx ) && ( DIG3_prev !== DIG3_expected_prev )
		&& ((DIG3_expected_prev !== last_DIG3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DIG3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DIG3_expected_prev);
		$display ("     Real value = %b", DIG3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_DIG3_exp = DIG3_expected_prev;
	end
	if (
		( OA_expected_prev !== 1'bx ) && ( OA_prev !== OA_expected_prev )
		&& ((OA_expected_prev !== last_OA_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OA_expected_prev);
		$display ("     Real value = %b", OA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OA_exp = OA_expected_prev;
	end
	if (
		( OB_expected_prev !== 1'bx ) && ( OB_prev !== OB_expected_prev )
		&& ((OB_expected_prev !== last_OB_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OB :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OB_expected_prev);
		$display ("     Real value = %b", OB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OB_exp = OB_expected_prev;
	end
	if (
		( OC_expected_prev !== 1'bx ) && ( OC_prev !== OC_expected_prev )
		&& ((OC_expected_prev !== last_OC_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OC_expected_prev);
		$display ("     Real value = %b", OC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_OC_exp = OC_expected_prev;
	end
	if (
		( OD_expected_prev !== 1'bx ) && ( OD_prev !== OD_expected_prev )
		&& ((OD_expected_prev !== last_OD_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OD :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OD_expected_prev);
		$display ("     Real value = %b", OD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OD_exp = OD_expected_prev;
	end
	if (
		( OE_expected_prev !== 1'bx ) && ( OE_prev !== OE_expected_prev )
		&& ((OE_expected_prev !== last_OE_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OE_expected_prev);
		$display ("     Real value = %b", OE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_OE_exp = OE_expected_prev;
	end
	if (
		( OF_expected_prev !== 1'bx ) && ( OF_prev !== OF_expected_prev )
		&& ((OF_expected_prev !== last_OF_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OF_expected_prev);
		$display ("     Real value = %b", OF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_OF_exp = OF_expected_prev;
	end
	if (
		( OG_expected_prev !== 1'bx ) && ( OG_prev !== OG_expected_prev )
		&& ((OG_expected_prev !== last_OG_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OG :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OG_expected_prev);
		$display ("     Real value = %b", OG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_OG_exp = OG_expected_prev;
	end
	if (
		( r_expected_prev[0] !== 1'bx ) && ( r_prev[0] !== r_expected_prev[0] )
		&& ((r_expected_prev[0] !== last_r_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_expected_prev);
		$display ("     Real value = %b", r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_r_exp[0] = r_expected_prev[0];
	end
	if (
		( r_expected_prev[1] !== 1'bx ) && ( r_prev[1] !== r_expected_prev[1] )
		&& ((r_expected_prev[1] !== last_r_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_expected_prev);
		$display ("     Real value = %b", r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_r_exp[1] = r_expected_prev[1];
	end
	if (
		( r_expected_prev[2] !== 1'bx ) && ( r_prev[2] !== r_expected_prev[2] )
		&& ((r_expected_prev[2] !== last_r_exp[2]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_expected_prev);
		$display ("     Real value = %b", r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_r_exp[2] = r_expected_prev[2];
	end
	if (
		( r_expected_prev[3] !== 1'bx ) && ( r_prev[3] !== r_expected_prev[3] )
		&& ((r_expected_prev[3] !== last_r_exp[3]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r_expected_prev);
		$display ("     Real value = %b", r_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_r_exp[3] = r_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module EDA3_coincharger_vlg_vec_tst();
// constants                                           
// general purpose registers
reg c0;
reg c1;
reg c2;
reg c3;
reg CLK;
// wires                                               
wire DIG0;
wire DIG1;
wire DIG2;
wire DIG3;
wire OA;
wire OB;
wire OC;
wire OD;
wire OE;
wire OF;
wire OG;
wire [3:0] r;

wire sampler;                             

// assign statements (if any)                          
EDA3_coincharger i1 (
// port map - connection between master ports and signals/registers   
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.CLK(CLK),
	.DIG0(DIG0),
	.DIG1(DIG1),
	.DIG2(DIG2),
	.DIG3(DIG3),
	.OA(OA),
	.OB(OB),
	.OC(OC),
	.OD(OD),
	.OE(OE),
	.OF(OF),
	.OG(OG),
	.r(r)
);

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	CLK = #25000 1'b0;
	CLK = #10000 1'b1;
	CLK = #40000 1'b0;
	CLK = #25000 1'b1;
	# 25000;
	repeat(17)
	begin
		CLK = 1'b0;
		CLK = #25000 1'b1;
		# 25000;
	end
end 

// c0
initial
begin
	c0 = 1'b0;
	c0 = #40000 1'b1;
	c0 = #60000 1'b0;
	c0 = #60000 1'b1;
	c0 = #40000 1'b0;
end 

// c1
initial
begin
	c1 = 1'b0;
	c1 = #60000 1'b1;
	c1 = #40000 1'b0;
	c1 = #60000 1'b1;
	c1 = #40000 1'b0;
end 

// c2
initial
begin
	c2 = 1'b0;
	c2 = #60000 1'b1;
	c2 = #40000 1'b0;
	c2 = #140000 1'b1;
	c2 = #60000 1'b0;
end 

// c3
initial
begin
	c3 = 1'b0;
	c3 = #180000 1'b1;
	c3 = #20000 1'b0;
	c3 = #140000 1'b1;
	c3 = #60000 1'b0;
end 

EDA3_coincharger_vlg_sample_tst tb_sample (
	.c0(c0),
	.c1(c1),
	.c2(c2),
	.c3(c3),
	.CLK(CLK),
	.sampler_tx(sampler)
);

EDA3_coincharger_vlg_check_tst tb_out(
	.DIG0(DIG0),
	.DIG1(DIG1),
	.DIG2(DIG2),
	.DIG3(DIG3),
	.OA(OA),
	.OB(OB),
	.OC(OC),
	.OD(OD),
	.OE(OE),
	.OF(OF),
	.OG(OG),
	.r(r),
	.sampler_rx(sampler)
);
endmodule

